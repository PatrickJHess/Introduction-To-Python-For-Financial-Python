Search.setIndex({"alltitles": {"<font color='green'>array_method</font> with two rows and three columns is transposed and assigned to<br> <font color='green'>transpose_array</font> with three rows and two columns The sole argument of <font color='green'>transpose()</font><br> is the array that is to be transposed.": [[1, "array-method-with-two-rows-and-three-columns-is-transposed-and-assigned-to-transpose-array-with-three-rows-and-two-columns-the-sole-argument-of-transpose-is-the-array-that-is-to-be-transposed"]], "<font color='green'>average_bedrooms()</font> is applied to each longitude (row) of the DataFrame <font color='green'>df_excel_new</font>. Using the anonymous lambda function allows the assignment of values in each row as arguments of the function.^{5}": [[2, "average-bedrooms-is-applied-to-each-longitude-row-of-the-dataframe-df-excel-new-using-the-anonymous-lambda-function-allows-the-assignment-of-values-in-each-row-as-arguments-of-the-function-5"]], "<font color='green'>capitalize()</font> Method Of string objects changes the lower case letter to upper case.": [[4, "id2"]], "<font color='green'>capitalize()</font> method of string objects changes the lower case letter to upper case.": [[4, "capitalize-method-of-string-objects-changes-the-lower-case-letter-to-upper-case"], [4, "id1"]], "<font color='green'>del</font> permanently removes the key:value pair from the dictionary.": [[5, "del-permanently-removes-the-key-value-pair-from-the-dictionary"]], "<font color='green'>df_bare_bones</font> is a table, but it\u2019s not very useful.  The first improvement is to provide labels for the<br> columns and the rows.  Both are attributes of <font color='green'>df_bare_bones</font> and the values have been<br> assigned by Pandas.  The column attribute is referred to as <font color='green'>columns</font> and the row attribute<br> as <font color='green'>index</font>. As with all objects, these attributes can be accessed using a dot after the<br> object\u2019s name. In this case, the <font color='green'>columns</font> attribute is assigned the list <font color='green'>[\u2018First\u2019, \u2018Second\u2019, \u2018Third\u2019]</font>,<br> and the <font color='green'>rows</font> attribute is assigned the list <font color='green'>[\u2018x\u2019, \u2018y\u2019]</font>.": [[2, "df-bare-bones-is-a-table-but-it-s-not-very-useful-the-first-improvement-is-to-provide-labels-for-the-columns-and-the-rows-both-are-attributes-of-df-bare-bones-and-the-values-have-been-assigned-by-pandas-the-column-attribute-is-referred-to-as-columns-and-the-row-attribute-as-index-as-with-all-objects-these-attributes-can-be-accessed-using-a-dot-after-the-object-s-name-in-this-case-the-columns-attribute-is-assigned-the-list-first-second-third-and-the-rows-attribute-is-assigned-the-list-x-y"]], "A <font color='green'>lambda</font> can have numerous arguments, but only a single result. Unlike a typical function, <font color='green'>lambda</font> is not named and controls a single statement. The <font color='green'>square_value_div()</font> function can be expressed as a <font color='green'>lambda</font> function.": [[6, "a-lambda-can-have-numerous-arguments-but-only-a-single-result-unlike-a-typical-function-lambda-is-not-named-and-controls-a-single-statement-the-square-value-div-function-can-be-expressed-as-a-lambda-function"]], "A Bare Bones DataFrame": [[2, "a-bare-bones-dataframe"]], "A DataFrame, reminiscent of a spreadsheet, is the primary object in Pandas. Data is organized into tables with columns and rows, that can be manipulated similar to a spreadsheet. Depending on your notebook, you may need to install Pandas before importing it.": [[2, "a-dataframe-reminiscent-of-a-spreadsheet-is-the-primary-object-in-pandas-data-is-organized-into-tables-with-columns-and-rows-that-can-be-manipulated-similar-to-a-spreadsheet-depending-on-your-notebook-you-may-need-to-install-pandas-before-importing-it"]], "A First Look At Lists": [[0, null]], "A Global Variable Accessed By A Function": [[6, "a-global-variable-accessed-by-a-function"]], "A Global Variable Is Defined Inside A Function": [[6, "a-global-variable-is-defined-inside-a-function"]], "A Nested List And A List With Multiple Data Types": [[0, "a-nested-list-and-a-list-with-multiple-data-types"]], "A One Dimensional Array": [[1, "a-one-dimensional-array"]], "A Quick Introduction To Dictionaries": [[5, null]], "A Quick Introduction To Manipulating Dates": [[7, null]], "A Quick Introduction To NumPy": [[1, null]], "A Quick Introduction To Numbers And Booleans": [[8, null]], "A Quick Introduction To Pandas": [[2, null]], "A Quick Introduction To Tuples": [[12, null]], "A Quick Look At Functions": [[6, null]], "A Quick Look At Strings": [[11, null]], "A Simple <font color='green'>for</font> Loop": [[4, "a-simple-for-loop"]], "A Simple Two-Dimensional Array": [[1, "a-simple-two-dimensional-array"]], "A Variable Local To A Function Does Not Affect A Global Variable": [[6, "a-variable-local-to-a-function-does-not-affect-a-global-variable"]], "A column vector represents the simplest multi-dimensional array. An array is generated from a nested list of the integers one, two, and three. This array has two dimensions (<font color='green'>ndim</font>) and its rows and columns (<font color='green'>shape</font>) are three and one, respectively.": [[1, "a-column-vector-represents-the-simplest-multi-dimensional-array-an-array-is-generated-from-a-nested-list-of-the-integers-one-two-and-three-this-array-has-two-dimensions-ndim-and-its-rows-and-columns-shape-are-three-and-one-respectively"]], "A datetime object can be converted to a string using either the built-in Python function <font color='green'>str()</font> or the <font color='green'>strptime()</font> method of the datetime object.": [[7, "a-datetime-object-can-be-converted-to-a-string-using-either-the-built-in-python-function-str-or-the-strptime-method-of-the-datetime-object"]], "A floating-point number has a fractional component (a decimal point). In the code below, the value 0.5 is assigned to the variable <font color='green'>one_half</font>.": [[8, "a-floating-point-number-has-a-fractional-component-a-decimal-point-in-the-code-below-the-value-0-5-is-assigned-to-the-variable-one-half"]], "A function\u2019s parameters are the variables it accepts; its arguments, the specific values assigned to those variables. In the initial example, <font color='green'>x</font> is the parameter": [[6, "a-function-s-parameters-are-the-variables-it-accepts-its-arguments-the-specific-values-assigned-to-those-variables-in-the-initial-example-x-is-the-parameter"]], "A list can be instantiated (created) in several ways.  The easiest way is to directly assign values by using square brackets with commas to separate data. Another way is using the list constructor <font color='green'>list()</font> with iterable data. List comprehension is also an option that involves iterating through data to create a list.": [[0, "a-list-can-be-instantiated-created-in-several-ways-the-easiest-way-is-to-directly-assign-values-by-using-square-brackets-with-commas-to-separate-data-another-way-is-using-the-list-constructor-list-with-iterable-data-list-comprehension-is-also-an-option-that-involves-iterating-through-data-to-create-a-list"]], "A list is a data type that can hold multiple values.": [[0, "a-list-is-a-data-type-that-can-hold-multiple-values"]], "A row of A DataFrame is identified with the <font color='green'>loc</font> or <font color='green'>iloc</font> attribute.  The <font color='green'>loc</font> attribute uses<br> the value of the <font color='green'>index</font>; in our example \u2018x\u2019 or \u2018y\u2019.  The <font color='green'>iloc</font> attribute uses the location of the row<br> in the <font color='green'>index</font>; in our example, 0 or 1.": [[2, "a-row-of-a-dataframe-is-identified-with-the-loc-or-iloc-attribute-the-loc-attribute-uses-the-value-of-the-index-in-our-example-x-or-y-the-iloc-attribute-uses-the-location-of-the-row-in-the-index-in-our-example-0-or-1"]], "A string is a variable that represents printable characters, such as letters, numbers, etc. Like numbers and booleans, strings hold single values.  Unlike numbers and booleans, strings are iterable.  If a variable is iterable, the values or members  of the variable can be enumerated.  In the case of strings, the characters can be enumerated.  Many Python concepts can be illustrated with strings.": [[11, "a-string-is-a-variable-that-represents-printable-characters-such-as-letters-numbers-etc-like-numbers-and-booleans-strings-hold-single-values-unlike-numbers-and-booleans-strings-are-iterable-if-a-variable-is-iterable-the-values-or-members-of-the-variable-can-be-enumerated-in-the-case-of-strings-the-characters-can-be-enumerated-many-python-concepts-can-be-illustrated-with-strings"]], "Access Keys With <font color='green'>keys()</font> Method": [[5, "access-keys-with-keys-method"]], "Access Values With <font color='green'>values()</font> Method": [[5, "access-values-with-values-method"]], "Add A Column": [[2, "add-a-column"]], "Add A Dictionary To Or Modify An Existing Dictionary: The <font color='green'>update()</font> Method": [[5, "add-a-dictionary-to-or-modify-an-existing-dictionary-the-update-method"]], "Add With Dictionary And Tuple": [[5, "add-with-dictionary-and-tuple"]], "Adding Labels For Columns And Rows": [[2, "adding-labels-for-columns-and-rows"]], "All methods are valid approaches, with dictionary comprehension being more Pythonic when you have all the data available at once. Each method creates dictionaries with string keys and list values.": [[5, "all-methods-are-valid-approaches-with-dictionary-comprehension-being-more-pythonic-when-you-have-all-the-data-available-at-once-each-method-creates-dictionaries-with-string-keys-and-list-values"]], "Alternative method is <font color='green'>dict.pop(\u2018key\u2019)</font> which returns the deleted value": [[5, "alternative-method-is-dict-pop-key-which-returns-the-deleted-value"]], "An example cell": [[15, "an-example-cell"]], "Another bit of Python grammar is the number sign # (hashtag) indicating a comment.  The Python interpreter ignores anything on a line following a #.  If a line begins with #, the whole line is ignored and treated as a comment.  If the # occurs after the start of the line, the interpreter parses the information before the # and ignores what follows. The three lines of code below show three examples of invalid names. Each of the lines includes # followed by a comment explaining the nature of the error.  As you might guess, a common use of # is as an explanation of the code or its purpose.": [[3, "another-bit-of-python-grammar-is-the-number-sign-hashtag-indicating-a-comment-the-python-interpreter-ignores-anything-on-a-line-following-a-if-a-line-begins-with-the-whole-line-is-ignored-and-treated-as-a-comment-if-the-occurs-after-the-start-of-the-line-the-interpreter-parses-the-information-before-the-and-ignores-what-follows-the-three-lines-of-code-below-show-three-examples-of-invalid-names-each-of-the-lines-includes-followed-by-a-comment-explaining-the-nature-of-the-error-as-you-might-guess-a-common-use-of-is-as-an-explanation-of-the-code-or-its-purpose"]], "Arguments can be either positional or keyword. Positional arguments must be assigned in the order of the parameters. The <font color='green'>square_value_div()</font> function has parameters x and y. Both parameters are assigned positional arguments.": [[6, "arguments-can-be-either-positional-or-keyword-positional-arguments-must-be-assigned-in-the-order-of-the-parameters-the-square-value-div-function-has-parameters-x-and-y-both-parameters-are-assigned-positional-arguments"]], "As an alternative the label values can  be assigned to <font color='green'>columns</font> and <font color='green'>index</font> as arguments of the method. Because the attributes are not variables of the notebook, the names assigned may be the same as the attributes.": [[2, "as-an-alternative-the-label-values-can-be-assigned-to-columns-and-index-as-arguments-of-the-method-because-the-attributes-are-not-variables-of-the-notebook-the-names-assigned-may-be-the-same-as-the-attributes"]], "Assign A List To The New Column \u2018Values of z\u2019": [[2, "assign-a-list-to-the-new-column-values-of-z"]], "Assign Three Plus The Column \u2018Values of y\u2019 To The New Column \u2018Values of z\u2019": [[2, "assign-three-plus-the-column-values-of-y-to-the-new-column-values-of-z"]], "Assign the text \u201cFinancial Python\u201d to the variable <font color='green'>financial_python</font>. The first option is to use list comprehension to convert the string to a list of characters: each character becomes a separate value.": [[0, "assign-the-text-financial-python-to-the-variable-financial-python-the-first-option-is-to-use-list-comprehension-to-convert-the-string-to-a-list-of-characters-each-character-becomes-a-separate-value"]], "Assigning <font color='green'>x</font>=2 and <font color='green'>y</font>=4 is written as:": [[6, "assigning-x-2-and-y-4-is-written-as"]], "Assigning A New Value To An Existing Global Variable Inside A Function": [[6, "assigning-a-new-value-to-an-existing-global-variable-inside-a-function"]], "Assigning A String Value": [[11, "assigning-a-string-value"]], "Attempting To Remove A Key When The Key Doesn\u2019t Exist": [[5, "attempting-to-remove-a-key-when-the-key-doesn-t-exist"]], "Background Material: An Introduction to Python for Financial Python": [[13, null]], "Basic Grammar": [[3, null]], "Because booleans have two possible states (True or False), the numerical value of a boolean is zero for False and one for True.  The boolean value of any nonzero number is True; zero is false.": [[8, "because-booleans-have-two-possible-states-true-or-false-the-numerical-value-of-a-boolean-is-zero-for-false-and-one-for-true-the-boolean-value-of-any-nonzero-number-is-true-zero-is-false"]], "Because the <font color='green'>DataFrame()</font> method interprets the dictionary keys as column names, <font color='green'>df_dict</font><br> is the transpose of <font color='green'>df_bare_bones</font>.  To that end, the index of <font color='green'>df_dict</font> is assigned the <font color='green'>columns</font><br> list that was assigned as the <font color='green'>columns</font> of <font color='green'>df_bare_bones</font>.  The Pandas method <font color='green'>transpose()</font><br> transposes a DataFrame but does not replace the values.  To keep the transposed <font color='green'>DataFrame</font><br> it must be assigned to another variable. The <font color='green'>transpose</font> method may also be accessed with a capital <font color='green'>T</font>.": [[2, "because-the-dataframe-method-interprets-the-dictionary-keys-as-column-names-df-dict-is-the-transpose-of-df-bare-bones-to-that-end-the-index-of-df-dict-is-assigned-the-columns-list-that-was-assigned-as-the-columns-of-df-bare-bones-the-pandas-method-transpose-transposes-a-dataframe-but-does-not-replace-the-values-to-keep-the-transposed-dataframe-it-must-be-assigned-to-another-variable-the-transpose-method-may-also-be-accessed-with-a-capital-t"]], "Booleans": [[8, "booleans"]], "Booleans represent true or false states and return the Python values True or False. In the following code, <font color='green'>x</font> is set to 5 and <font color='green'>y</font> to 10. Most comparisons such as greater than, less than, or greater than/equal to are straightforward. The equality check requires attention. The double equal signs <font color='green'>==</font> tests for equality. A single equal sign <font color='green'>=</font> assign a value. Finally, <font color='green'>!=</font> checks for inequality.": [[8, "booleans-represent-true-or-false-states-and-return-the-python-values-true-or-false-in-the-following-code-x-is-set-to-5-and-y-to-10-most-comparisons-such-as-greater-than-less-than-or-greater-than-equal-to-are-straightforward-the-equality-check-requires-attention-the-double-equal-signs-tests-for-equality-a-single-equal-sign-assign-a-value-finally-checks-for-inequality"]], "Calculations on NumPy arrays are element by element creating a new array of<br> results with size attribute of three.  Here results are demonstrated with two<br> one-dimensional arrays.": [[1, "calculations-on-numpy-arrays-are-element-by-element-creating-a-new-array-of-results-with-size-attribute-of-three-here-results-are-demonstrated-with-two-one-dimensional-arrays"]], "Citations": [[14, "citations"]], "Click here for a description of these and other string methods.": [[11, "click-here-for-a-description-of-these-and-other-string-methods"]], "Code blocks and outputs": [[16, "code-blocks-and-outputs"]], "Colab notebooks contain sample data within the \u2018sample_data\u2019 folder. In this instance, the data from the csv file \u2018california_housing_train.csv\u2019 is transformed into a DataFrame using the Pandas <font color='green'>read_csv()</font> method. The file is downloaded from DropBox and the sole necessary argument is the path to the file.": [[2, "colab-notebooks-contain-sample-data-within-the-sample-data-folder-in-this-instance-the-data-from-the-csv-file-california-housing-train-csv-is-transformed-into-a-dataframe-using-the-pandas-read-csv-method-the-file-is-downloaded-from-dropbox-and-the-sole-necessary-argument-is-the-path-to-the-file"]], "Combining And Slicing Lists With The Index": [[0, "combining-and-slicing-lists-with-the-index"]], "Combining Or Concatenating Strings": [[11, "combining-or-concatenating-strings"]], "Conditional Statements": [[4, "conditional-statements"]], "Content with notebooks": [[16, null]], "Control & Controlled Statements On Single Or Multiple Lines": [[4, "control-controlled-statements-on-single-or-multiple-lines"]], "Control Statements": [[4, null]], "Converting Integers, Floating Points, and Booleans": [[8, "converting-integers-floating-points-and-booleans"]], "Converting Numbers And Booleans To Strings": [[11, "converting-numbers-and-booleans-to-strings"]], "Converting Strings To Numbers And Booleans": [[11, "converting-strings-to-numbers-and-booleans"]], "Create A DataFrame From A Dictionary": [[2, "create-a-dataframe-from-a-dictionary"]], "Create A List By Iterating Through A String: List Comprehension & For Loop": [[0, "create-a-list-by-iterating-through-a-string-list-comprehension-for-loop"]], "Create A datetime Object": [[7, "create-a-datetime-object"]], "Create a notebook with MyST Markdown": [[15, "create-a-notebook-with-myst-markdown"]], "Creating A DataFrame With A CSV File": [[2, "creating-a-dataframe-with-a-csv-file"]], "Creating Or Instantiating A DataFrame": [[2, "creating-or-instantiating-a-dataframe"]], "DataFrames, CSV, And Excel Files": [[2, "dataframes-csv-and-excel-files"]], "Datetime Modules": [[7, "datetime-modules"]], "Datetime Object From A String": [[7, "datetime-object-from-a-string"]], "Default Arguments": [[6, "default-arguments"]], "Default values can often make the function\u2019s purpose clearer by showing common usage patterns.  Defaults make parameters optional.": [[6, "default-values-can-often-make-the-function-s-purpose-clearer-by-showing-common-usage-patterns-defaults-make-parameters-optional"]], "Dictionaries store data as key:value pairs. Much like a physical dictionary where a definition is found for a word, Python dictionaries hold data (the value) associated with a label (key). Like lists and tuples, dictionaries are iterable and can be created in multiple ways: using curly brackets, the <font color='green'>dict()</font> constructor, or dictionary comprehension. Dictionary keys must be unique and immutable, but the data associated with those keys is mutable.  key:value pairs may be deleted or added.": [[5, "dictionaries-store-data-as-key-value-pairs-much-like-a-physical-dictionary-where-a-definition-is-found-for-a-word-python-dictionaries-hold-data-the-value-associated-with-a-label-key-like-lists-and-tuples-dictionaries-are-iterable-and-can-be-created-in-multiple-ways-using-curly-brackets-the-dict-constructor-or-dictionary-comprehension-dictionary-keys-must-be-unique-and-immutable-but-the-data-associated-with-those-keys-is-mutable-key-value-pairs-may-be-deleted-or-added"]], "Displays the longitude and the latitude of the first five rows as a list of tuples.  The index is assigned to longitude and latitudge to the \u2018latitude\u2019 column of <font color='green'>df_excel_new_index</font>.  The list <font color='green'>longitude_latitude</font> is created with list comprehension of the two values.": [[2, "displays-the-longitude-and-the-latitude-of-the-first-five-rows-as-a-list-of-tuples-the-index-is-assigned-to-longitude-and-latitudge-to-the-latitude-column-of-df-excel-new-index-the-list-longitude-latitude-is-created-with-list-comprehension-of-the-two-values"]], "Duplicated rows of a DataFrame or values of a Series can be determined with the <font color='green'>duplicated()</font> method.  By default the first occurrence of a duplicated value is marked as False and all others are marked as True.  Here the method is applied to the index of the first ten rows of <font color='green'>df_excel_new_index</font>.": [[2, "duplicated-rows-of-a-dataframe-or-values-of-a-series-can-be-determined-with-the-duplicated-method-by-default-the-first-occurrence-of-a-duplicated-value-is-marked-as-false-and-all-others-are-marked-as-true-here-the-method-is-applied-to-the-index-of-the-first-ten-rows-of-df-excel-new-index"]], "Element-By-Element Calculations": [[1, "element-by-element-calculations"]], "Elements of sets are unique and unordered.  Like dictionaries curly brackets are used.  But unlike dictionaries values have no keys.": [[10, "elements-of-sets-are-unique-and-unordered-like-dictionaries-curly-brackets-are-used-but-unlike-dictionaries-values-have-no-keys"]], "Even though tuples are immutable (can\u2019t be changed after creation), they support many of the same operations as lists, including concatenation, slicing, and iteration.": [[12, "even-though-tuples-are-immutable-can-t-be-changed-after-creation-they-support-many-of-the-same-operations-as-lists-including-concatenation-slicing-and-iteration"]], "Example Of The Global Keyword": [[6, "example-of-the-global-keyword"]], "Example Where x Is local To <font color='green'>giving_something_back()</font>": [[6, "example-where-x-is-local-to-giving-something-back"]], "Examples Of Simple Functions": [[6, "examples-of-simple-functions"]], "Examples Of Valid and Invalid Variable Names": [[3, "examples-of-valid-and-invalid-variable-names"]], "Fixing The Row With <font color='green'>loc</font> And Iterating Through The Columns.": [[2, "fixing-the-row-with-loc-and-iterating-through-the-columns"]], "Floating Points": [[8, "floating-points"]], "For help with strings review the Chapter A Quick Look At Strings.": [[4, "for-help-with-strings-review-the-chapter-a-quick-look-at-strings"]], "For help with the string method <font color='green'>split()</font> take a look at the explanation in the Chapter A Quick Look At Strings.": [[4, "for-help-with-the-string-method-split-take-a-look-at-the-explanation-in-the-chapter-a-quick-look-at-strings"]], "Four Useful String Methods": [[11, "four-useful-string-methods"]], "Generally, these statements conclude with a colon. The statement being controlled can be on the same line; however, separate lines and proper indentation are required to control multiple statements. This notebook demonstrates each of these control statements except for functions. For help with functions review the Chapter A Quick Look At Functions.": [[4, "generally-these-statements-conclude-with-a-colon-the-statement-being-controlled-can-be-on-the-same-line-however-separate-lines-and-proper-indentation-are-required-to-control-multiple-statements-this-notebook-demonstrates-each-of-these-control-statements-except-for-functions-for-help-with-functions-review-the-chapter-a-quick-look-at-functions"]], "Global variables are defined outside of a function or defined as global inside a function.  Global variables are available everywhere. If a function defines a variable with the same name as a global variable, the variable is local and independent of the global variable.  A global variable can be modified by a function if declared global inside the function.": [[6, "global-variables-are-defined-outside-of-a-function-or-defined-as-global-inside-a-function-global-variables-are-available-everywhere-if-a-function-defines-a-variable-with-the-same-name-as-a-global-variable-the-variable-is-local-and-independent-of-the-global-variable-a-global-variable-can-be-modified-by-a-function-if-declared-global-inside-the-function"]], "If A Value Is In The List, The method <font color='green'>index()</font> Returns Its Location.": [[0, "if-a-value-is-in-the-list-the-method-index-returns-its-location"]], "If The Value Is Not In The List, The method <font color='green'>index()</font> Returns An Error Terminating Execution.": [[0, "if-the-value-is-not-in-the-list-the-method-index-returns-an-error-terminating-execution"]], "If an argument is not provided for <font color='green'>x</font> or <font color='green'>y</font>, default values are used. Arguments can be passed either by position or by keyword; however, positional arguments must follow the order defined in the function signature.": [[6, "if-an-argument-is-not-provided-for-x-or-y-default-values-are-used-arguments-can-be-passed-either-by-position-or-by-keyword-however-positional-arguments-must-follow-the-order-defined-in-the-function-signature"]], "If the block code controlled by a <font color='green'>try</font> statement fails, the code controlled by the <font color='green'>except</font> statement is executed.  Here it is illustrated with the square root of minus four.  Because the square root of minus four cannot be represented as a real number the statement controlled by <font color='green'>try</font> fails.  The statements controlled by <font color='green'>except</font> multiplies the square root of plus four by the Python representation of the imaginary number ij.": [[4, "if-the-block-code-controlled-by-a-try-statement-fails-the-code-controlled-by-the-except-statement-is-executed-here-it-is-illustrated-with-the-square-root-of-minus-four-because-the-square-root-of-minus-four-cannot-be-represented-as-a-real-number-the-statement-controlled-by-try-fails-the-statements-controlled-by-except-multiplies-the-square-root-of-plus-four-by-the-python-representation-of-the-imaginary-number-ij"]], "If you try to delete a non-existent key, it will raise a KeyError. There are two methods to avoid the error. The first method uses <font color='green'>try-except</font>.": [[5, "if-you-try-to-delete-a-non-existent-key-it-will-raise-a-keyerror-there-are-two-methods-to-avoid-the-error-the-first-method-uses-try-except"]], "If you want to only keep unique values, it makes sense to negate the values returned from <font color='green'>duplicated()</font>.": [[2, "if-you-want-to-only-keep-unique-values-it-makes-sense-to-negate-the-values-returned-from-duplicated"]], "Import date From datetime": [[7, "import-date-from-datetime"]], "In contrast, the <font color='green'>strptime()</font> method requires a format string.  Here the previously defined format string of <font color='green'>time_stamp</font> is used.": [[7, "in-contrast-the-strptime-method-requires-a-format-string-here-the-previously-defined-format-string-of-time-stamp-is-used"]], "In the first example The <font color='green'>create_global_variable</font>() function is modified to return the <font color='green'>give_something_back()</font> function.": [[6, "in-the-first-example-the-create-global-variable-function-is-modified-to-return-the-give-something-back-function"]], "In the next code cell the values of \u2018First\u2019 column are printed by iterating through the index with loc.": [[2, "in-the-next-code-cell-the-values-of-first-column-are-printed-by-iterating-through-the-index-with-loc"]], "In the second example notice that the index value ranges from zero to six; an example of zero-based indexing.  The following code is another example of zero-based indexing that prints characters in locations 0, 3, and 6 that represent F, a, and e.": [[11, "in-the-second-example-notice-that-the-index-value-ranges-from-zero-to-six-an-example-of-zero-based-indexing-the-following-code-is-another-example-of-zero-based-indexing-that-prints-characters-in-locations-0-3-and-6-that-represent-f-a-and-e"]], "In the second example, a function is passed as an argument of <font color='green'>function_as_argument()</font>.": [[6, "in-the-second-example-a-function-is-passed-as-an-argument-of-function-as-argument"]], "In this example the year is four digits and separated from the month and day by a dash. Hours, minutes, and seconds are separated by a backslash. The separators must be included in the format string.": [[7, "in-this-example-the-year-is-four-digits-and-separated-from-the-month-and-day-by-a-dash-hours-minutes-and-seconds-are-separated-by-a-backslash-the-separators-must-be-included-in-the-format-string"]], "In this example, the <font color='green'>apply()</font> method has the same effects as direct operation on the columns.": [[2, "in-this-example-the-apply-method-has-the-same-effects-as-direct-operation-on-the-columns"]], "Including Comments In Python Code": [[3, "including-comments-in-python-code"]], "Including The Labels As Arguments Of DataFrame()": [[2, "including-the-labels-as-arguments-of-dataframe"]], "Indentation": [[3, "indentation"]], "Index Method": [[12, "index-method"]], "Integers": [[8, "integers"]], "Integers are the values of counting: numbers without decimal points. In the code below, the integer 11 is assigned to the variable <font color='green'>eleven</font>.": [[8, "integers-are-the-values-of-counting-numbers-without-decimal-points-in-the-code-below-the-integer-11-is-assigned-to-the-variable-eleven"]], "Integers, floating points, and booleans can be converted from one type to another.": [[8, "integers-floating-points-and-booleans-can-be-converted-from-one-type-to-another"]], "Introduction-To-Python-For-Financial-Python": [[9, null]], "Invalid": [[3, "invalid"]], "Invalid Names": [[3, "invalid-names"]], "Inverting Matrices": [[1, "inverting-matrices"]], "Iterate Through Keys And Access Values": [[5, "iterate-through-keys-and-access-values"]], "Iterating And Slicing": [[12, "iterating-and-slicing"]], "Iterating Through A String And Zero-Based Indexes": [[11, "iterating-through-a-string-and-zero-based-indexes"]], "Iterating Through The Columns And Index": [[2, "iterating-through-the-columns-and-index"]], "It\u2019s common but not required that functions return a value to the line of code that called the function.  The first example function <font color='green'>nothing_returned()</font> prints a line of code but returns nothing to the calling code.  Because nothing is returned the boolean value of the results is False.": [[6, "it-s-common-but-not-required-that-functions-return-a-value-to-the-line-of-code-that-called-the-function-the-first-example-function-nothing-returned-prints-a-line-of-code-but-returns-nothing-to-the-calling-code-because-nothing-is-returned-the-boolean-value-of-the-results-is-false"]], "It\u2019s convenient to create a DataFrame from a dictionary.  Dictionaries are key-value pairs.^{4}<br> The keys are interpreted as column names, and the values are the data assigned to those columns.<br> In this example, the \u2018Value of x\u2019 and \u2018Value of y\u2019 columns are assigned the lists <font color='green'>x</font> and <font color='green'>y</font>, respectively.": [[2, "it-s-convenient-to-create-a-dataframe-from-a-dictionary-dictionaries-are-key-value-pairs-4-the-keys-are-interpreted-as-column-names-and-the-values-are-the-data-assigned-to-those-columns-in-this-example-the-value-of-x-and-value-of-y-columns-are-assigned-the-lists-x-and-y-respectively"]], "It\u2019s more convenient to import the <font color='green'>datetime</font> method directly from the <font color='green'>datetime</font> module and then refer to it without the module prefix.  The notebooks of Financial Python import the <font color='green'>datetime</font> method from the <font color='green'>datetime</font> module.": [[7, "it-s-more-convenient-to-import-the-datetime-method-directly-from-the-datetime-module-and-then-refer-to-it-without-the-module-prefix-the-notebooks-of-financial-python-import-the-datetime-method-from-the-datetime-module"]], "Keyword arguments are assigned when the function is called and are defined by the parameter\u2019s name. Keyword arguments are useful when default values are assigned or when the function\u2019s parameters are complex.  If both keyword and positional arguments are used, positional arguments must come first and in the right order.": [[6, "keyword-arguments-are-assigned-when-the-function-is-called-and-are-defined-by-the-parameter-s-name-keyword-arguments-are-useful-when-default-values-are-assigned-or-when-the-function-s-parameters-are-complex-if-both-keyword-and-positional-arguments-are-used-positional-arguments-must-come-first-and-in-the-right-order"]], "Learn more": [[14, "learn-more"]], "Length Of A String": [[11, "length-of-a-string"]], "Like lists, the <font color='green'>index</font> method returns the location of a value in a tuple. The <font color='green'>try-except</font> commands avoid an execution stopping error.": [[12, "like-lists-the-index-method-returns-the-location-of-a-value-in-a-tuple-the-try-except-commands-avoid-an-execution-stopping-error"]], "Local Variables": [[6, "local-variables"]], "Local variables exist only within the function where they are defined. Once the function finishes running, these variables are deleted and are no longer accessible.  For example, the variable <font color='green'>x</font> is established inside the function <font color='green'>giving_something_back()</font>. Attempting to execute the command:": [[6, "local-variables-exist-only-within-the-function-where-they-are-defined-once-the-function-finishes-running-these-variables-are-deleted-and-are-no-longer-accessible-for-example-the-variable-x-is-established-inside-the-function-giving-something-back-attempting-to-execute-the-command"]], "Locate A Row With An Index Value": [[2, "locate-a-row-with-an-index-value"]], "Looping Statements": [[4, "looping-statements"]], "Looping Through A List Created By The String Method <font color='green'>split()</font>": [[4, "looping-through-a-list-created-by-the-string-method-split"]], "Making A Column The Index": [[2, "making-a-column-the-index"]], "Many financial calculations, such as aligning present value factors with payment dates or annualizing returns and volatility, rely on numerical date analysis. This notebook explores key Python modules for date handling:": [[7, "many-financial-calculations-such-as-aligning-present-value-factors-with-payment-dates-or-annualizing-returns-and-volatility-rely-on-numerical-date-analysis-this-notebook-explores-key-python-modules-for-date-handling"]], "Markdown + notebooks": [[16, "markdown-notebooks"]], "Markdown Files": [[14, null]], "Mathematical Operators": [[8, "mathematical-operators"]], "Modify With Dictionary And List": [[5, "modify-with-dictionary-and-list"]], "Multi-Dimensional Arrays": [[1, "multi-dimensional-arrays"]], "Multiplying Arrays": [[1, "multiplying-arrays"]], "MyST markdown": [[16, "myst-markdown"]], "Name doesn\u2019t start with a character of the alphabet or an underscore": [[3, "name-doesn-t-start-with-a-character-of-the-alphabet-or-an-underscore"]], "Naming Variables": [[3, "naming-variables"]], "Negate A Pandas Value With ~": [[2, "negate-a-pandas-value-with"]], "Negative beginning or ending values cause the slice to operate relative to the iterable\u2019s length. <font color='green'>finance()</font> has a length of 7. A beginning value of -4 is equivalent to a beginning value of 3. An ending value of -3 is equivalent to an ending value of 4. The first line of code below extracts the final four characters, while the second extracts the initial four.": [[11, "negative-beginning-or-ending-values-cause-the-slice-to-operate-relative-to-the-iterable-s-length-finance-has-a-length-of-7-a-beginning-value-of-4-is-equivalent-to-a-beginning-value-of-3-an-ending-value-of-3-is-equivalent-to-an-ending-value-of-4-the-first-line-of-code-below-extracts-the-final-four-characters-while-the-second-extracts-the-initial-four"]], "No Arguments Provided": [[6, "no-arguments-provided"]], "Notebooks with MyST Markdown": [[15, null]], "NumPy Arrays Are Iterable": [[1, "numpy-arrays-are-iterable"]], "NumPy arrays can be sliced or iterated through. In the example, the <font color='green'>multiplied_array</font> is<br> first sliced, and then its rows are iterated over.": [[1, "numpy-arrays-can-be-sliced-or-iterated-through-in-the-example-the-multiplied-array-is-first-sliced-and-then-its-rows-are-iterated-over"]], "Numerous methods are available for string manipulation in Python. Four of the most relevant are described and demonstrated.": [[11, "numerous-methods-are-available-for-string-manipulation-in-python-four-of-the-most-relevant-are-described-and-demonstrated"]], "Numpy arrays cam have any number of dimensions.  Our attention is limited to two:": [[1, "numpy-arrays-cam-have-any-number-of-dimensions-our-attention-is-limited-to-two"]], "Of these seven, <font color='green'>floor division</font> and <font color='green'>modulus</font> might be unfamiliar.  <font color='green'>Floor division</font> rounds down the results of the division.  If both numbers are integers, <font color='green'>floor division</font> returns an integer; otherwise, a floating point.  There is one thing to be mindful of when using <font color='green'>floor division</font>: it always rounds down and this can seem confusing if the numerator and denominator have opposite signs.  <font color='green'>Modulus</font> returns the remainder of division.": [[8, "of-these-seven-floor-division-and-modulus-might-be-unfamiliar-floor-division-rounds-down-the-results-of-the-division-if-both-numbers-are-integers-floor-division-returns-an-integer-otherwise-a-floating-point-there-is-one-thing-to-be-mindful-of-when-using-floor-division-it-always-rounds-down-and-this-can-seem-confusing-if-the-numerator-and-denominator-have-opposite-signs-modulus-returns-the-remainder-of-division"]], "One Positional And One Keyword: Positional Argument First": [[6, "one-positional-and-one-keyword-positional-argument-first"]], "One datetime or date object can be subtracted from another.  The result is the datetime method <font color='green'>timedelta()</font> with specified values of days, seconds, and microseconds.  The variable <font color='green'>date_difference</font> is assigned time_stamp less  April 15^{th} 2025.": [[7, "one-datetime-or-date-object-can-be-subtracted-from-another-the-result-is-the-datetime-method-timedelta-with-specified-values-of-days-seconds-and-microseconds-the-variable-date-difference-is-assigned-time-stamp-less-april-15-th-2025"]], "One way to use the <font color='green'>datetime</font> method is to import the <font color='green'>datetime</font> module and then access the method as an extension of the module.": [[7, "one-way-to-use-the-datetime-method-is-to-import-the-datetime-module-and-then-access-the-method-as-an-extension-of-the-module"]], "Option 2 is to use a <font color='green'>for loop</font>. Initialize a list with no values. Then iterate through each character in <font color='green'>financial_python</font> adding each element to the new list for iteration.": [[0, "option-2-is-to-use-a-for-loop-initialize-a-list-with-no-values-then-iterate-through-each-character-in-financial-python-adding-each-element-to-the-new-list-for-iteration"]], "Other list methods are described here.": [[0, "other-list-methods-are-described-here"]], "Pandas To Numpy": [[2, "pandas-to-numpy"]], "Pandas To Timestamp() Method": [[2, "pandas-to-timestamp-method"]], "Pandas duplicated() Method": [[2, "pandas-duplicated-method"]], "Parameters And Arguments": [[6, "parameters-and-arguments"]], "Positional And Keyword Arguments": [[6, "positional-and-keyword-arguments"], [6, "id1"]], "Python Functions Are Like Any Other Object.": [[6, "python-functions-are-like-any-other-object"]], "Python has a convenient way of applying repetitive operations on the same variable.  Suppose you want to increment the value assigned to <font color='green'>x</font> with the value assigned to <font color='green'>y</font>.  Instead of typing <font color='green'>x</font> on both sides of the statement <font color='green'>(x=x+y)</font>, the short-cut allows you to include <font color='green'>x</font> and the operator on the left-hand side of the statement and <font color='green'>y</font> on the right-hand side <font color='green'>(x+=y)</font>.  Here are a few examples.": [[8, "python-has-a-convenient-way-of-applying-repetitive-operations-on-the-same-variable-suppose-you-want-to-increment-the-value-assigned-to-x-with-the-value-assigned-to-y-instead-of-typing-x-on-both-sides-of-the-statement-x-x-y-the-short-cut-allows-you-to-include-x-and-the-operator-on-the-left-hand-side-of-the-statement-and-y-on-the-right-hand-side-x-y-here-are-a-few-examples"]], "Python has reserved names called keywords, and these cannot be used to name a variable.   Executing the command": [[3, "python-has-reserved-names-called-keywords-and-these-cannot-be-used-to-name-a-variable-executing-the-command"]], "Python offers numerous built-in functions and methods, and users can easily create their own functions to address unique requirements. Functions are defined using the def keyword, followed by the function\u2019s name, parentheses, and a colon. Functions limit code duplication and improve the readability of complex code.^{1}": [[6, "python-offers-numerous-built-in-functions-and-methods-and-users-can-easily-create-their-own-functions-to-address-unique-requirements-functions-are-defined-using-the-def-keyword-followed-by-the-function-s-name-parentheses-and-a-colon-functions-limit-code-duplication-and-improve-the-readability-of-complex-code-1"]], "Python offers numerous libraries and modules, and one frequently used in finance is datetime. The module is part of the standard Python library. The modules defines objects with specific attributes and methods allowing for the manipulation of dates.": [[7, "python-offers-numerous-libraries-and-modules-and-one-frequently-used-in-finance-is-datetime-the-module-is-part-of-the-standard-python-library-the-modules-defines-objects-with-specific-attributes-and-methods-allowing-for-the-manipulation-of-dates"]], "Python provides various control statements to manage program flow.": [[4, "python-provides-various-control-statements-to-manage-program-flow"]], "Python uses indentation to indicate lines of code that are controlled by other lines of code.  If a line of code is not controlling a statement following it, the lines of code must have the same indentation.": [[3, "python-uses-indentation-to-indicate-lines-of-code-that-are-controlled-by-other-lines-of-code-if-a-line-of-code-is-not-controlling-a-statement-following-it-the-lines-of-code-must-have-the-same-indentation"]], "Python, like all programming languages, imposes rules on the syntax and formatting of code.  Python is rightly regarded as user friendly, but in the beginning abiding by these \u201crules\u2019\u2019 may seem awkward. Over time you will become comfortable with the required syntax and formatting. The obvious recommendation is \u201ctrust the process\u201d and learn by doing as new concepts and commands are introduced.": [[3, "python-like-all-programming-languages-imposes-rules-on-the-syntax-and-formatting-of-code-python-is-rightly-regarded-as-user-friendly-but-in-the-beginning-abiding-by-these-rules-may-seem-awkward-over-time-you-will-become-comfortable-with-the-required-syntax-and-formatting-the-obvious-recommendation-is-trust-the-process-and-learn-by-doing-as-new-concepts-and-commands-are-introduced"]], "Quickly add YAML metadata for MyST Notebooks": [[15, "quickly-add-yaml-metadata-for-myst-notebooks"]], "Recall that \u2018finance\u2019 is defined as the string \u2018Finance\u2019": [[4, "recall-that-finance-is-defined-as-the-string-finance"]], "Removing A Key With The <font color='green'>del</font> Command And <font color='green'>pop()</font> Method": [[5, "removing-a-key-with-the-del-command-and-pop-method"]], "Reserved Keywords": [[3, "reserved-keywords"]], "Sample Roles and Directives": [[14, "sample-roles-and-directives"]], "Set Comprehension": [[10, "set-comprehension"]], "Set comprehension is similar to list comprehension but differs due to the uniqueness of the members of a set.  To illustrate the list of lists with the elements of <font color='green'>x, y</font> and a list of <font color='green'>[4,5,6, 7, 8]</font>.": [[10, "set-comprehension-is-similar-to-list-comprehension-but-differs-due-to-the-uniqueness-of-the-members-of-a-set-to-illustrate-the-list-of-lists-with-the-elements-of-x-y-and-a-list-of-4-5-6-7-8"]], "Sets": [[10, null]], "Sets may be created with curly brackets, the <font color='green'>set()</font> constructor, and comprehension.": [[10, "sets-may-be-created-with-curly-brackets-the-set-constructor-and-comprehension"]], "Short-Cut Mathematical Operators": [[8, "short-cut-mathematical-operators"]], "Slicing A String": [[11, "slicing-a-string"]], "Some Datetime Attributes": [[7, "some-datetime-attributes"]], "Some Useful Methods": [[0, "some-useful-methods"]], "Space is not a character of the alphabet, an integer between 0 to 9 or an underscore": [[3, "space-is-not-a-character-of-the-alphabet-an-integer-between-0-to-9-or-an-underscore"]], "String From A datetime Object": [[7, "string-from-a-datetime-object"]], "String slicing utilizes index locations. A slice is defined by its starting and ending points, along with the step size, each separated by a colon. The beginning index defaults to zero, the ending to the iterable\u2019s length, and the step size to one. Consequently, these two statements produce identical slices.": [[11, "string-slicing-utilizes-index-locations-a-slice-is-defined-by-its-starting-and-ending-points-along-with-the-step-size-each-separated-by-a-colon-the-beginning-index-defaults-to-zero-the-ending-to-the-iterable-s-length-and-the-step-size-to-one-consequently-these-two-statements-produce-identical-slices"]], "Strings are defined using either single or double quotes. The single quote is the apostrophe on the key board. To include a single quote as part of a string, either use double quotes for the string\u2019s definition or precede the single quote inside the string with a backslash (\\) and the parser will disregard it.": [[11, "strings-are-defined-using-either-single-or-double-quotes-the-single-quote-is-the-apostrophe-on-the-key-board-to-include-a-single-quote-as-part-of-a-string-either-use-double-quotes-for-the-string-s-definition-or-precede-the-single-quote-inside-the-string-with-a-backslash-and-the-parser-will-disregard-it"]], "Strings can be combined or concatenated with the plus sign including using the short-cut version of the plus sign (+=).": [[11, "strings-can-be-combined-or-concatenated-with-the-plus-sign-including-using-the-short-cut-version-of-the-plus-sign"]], "Strings values of numbers can be converted to integers or floating point numbers.  The boolean value of an empty string is False; all others, True.": [[11, "strings-values-of-numbers-can-be-converted-to-integers-or-floating-point-numbers-the-boolean-value-of-an-empty-string-is-false-all-others-true"]], "Strings, being iterable, necessarily contain elements or members that possess a countable length. Python\u2019s built-in <font color='green'>len()</font> function provides this count, returning the number of elements within the iterable. An empty string or any empty iterable will have a length of zero. In the case of a string, the length is equal to the number of characters, including blanks, that are in the string.": [[11, "strings-being-iterable-necessarily-contain-elements-or-members-that-possess-a-countable-length-python-s-built-in-len-function-provides-this-count-returning-the-number-of-elements-within-the-iterable-an-empty-string-or-any-empty-iterable-will-have-a-length-of-zero-in-the-case-of-a-string-the-length-is-equal-to-the-number-of-characters-including-blanks-that-are-in-the-string"]], "Subtracting": [[7, "subtracting"]], "Subtracting And Adding datetime Objects": [[7, "subtracting-and-adding-datetime-objects"]], "The <font color='green'>append</font>, <font color='green'>index</font>, and <font color='green'>sort</font> methods are commonly used tools for working with lists. The <font color='green'>append</font> method adds a new element to the end of a list. The <font color='green'>index</font> method provides the first location of a specified value within the list. The <font color='green'>sort</font> method rearranges the elements of the list, with descending order as the default and ascending order as an option (reverse=True).": [[0, "the-append-index-and-sort-methods-are-commonly-used-tools-for-working-with-lists-the-append-method-adds-a-new-element-to-the-end-of-a-list-the-index-method-provides-the-first-location-of-a-specified-value-within-the-list-the-sort-method-rearranges-the-elements-of-the-list-with-descending-order-as-the-default-and-ascending-order-as-an-option-reverse-true"]], "The <font color='green'>apply()</font> function in Pandas is a versatile method used to apply a function along an axis of a DataFrame or to the values of a Series. It enables element-wise, row-wise, or column-wise operations using custom or built-in functions avoiding iterating through rows or columns.": [[2, "the-apply-function-in-pandas-is-a-versatile-method-used-to-apply-a-function-along-an-axis-of-a-dataframe-or-to-the-values-of-a-series-it-enables-element-wise-row-wise-or-column-wise-operations-using-custom-or-built-in-functions-avoiding-iterating-through-rows-or-columns"]], "The <font color='green'>array()</font> method uses iterable data, such as a list, as its argument to generate NumPy arrays. For instance, an array containing the numbers 1, 2, and 3 can be created from a list.^{2}": [[1, "the-array-method-uses-iterable-data-such-as-a-list-as-its-argument-to-generate-numpy-arrays-for-instance-an-array-containing-the-numbers-1-2-and-3-can-be-created-from-a-list-2"]], "The <font color='green'>average_bedrooms()</font> function calculates the average number of bedrooms from the total number of bedrooms and households.": [[2, "the-average-bedrooms-function-calculates-the-average-number-of-bedrooms-from-the-total-number-of-bedrooms-and-households"]], "The <font color='green'>date()</font> is returned with the datetime method <font color='green'>date()</font> or is created with the date module of the datetime library. A date object includes the year, month, and day of datetime objects.  If the date module is imported, the module can be created by passing year, month, and day as arguments.": [[7, "the-date-is-returned-with-the-datetime-method-date-or-is-created-with-the-date-module-of-the-datetime-library-a-date-object-includes-the-year-month-and-day-of-datetime-objects-if-the-date-module-is-imported-the-module-can-be-created-by-passing-year-month-and-day-as-arguments"]], "The <font color='green'>datetime()</font> method is part of the datetime module. Its parameters include year, month, day, hour, minute, second, and microsecond. Arguments are required for year, month, and day. The other parameters default to zero.": [[7, "the-datetime-method-is-part-of-the-datetime-module-its-parameters-include-year-month-day-hour-minute-second-and-microsecond-arguments-are-required-for-year-month-and-day-the-other-parameters-default-to-zero"]], "The <font color='green'>dateutil</font> module builds upon the datetime module, offering an enhanced <font color='green'>relativedelta()</font> method. This method expands on <font color='green'>timedelta</font> by providing additional parameters; most notably for our use is year and month.": [[7, "the-dateutil-module-builds-upon-the-datetime-module-offering-an-enhanced-relativedelta-method-this-method-expands-on-timedelta-by-providing-additional-parameters-most-notably-for-our-use-is-year-and-month"]], "The <font color='green'>get()</font> Method Doesn\u2019t Return An Error If Key Is Missing.": [[5, "the-get-method-doesn-t-return-an-error-if-key-is-missing"]], "The <font color='green'>get_indexer()</font> method locates the row number of the <font color='green'>index</font> from a value.  If the label is not present, minus one is returned. The value must be an iterable.  Here it is a list.": [[2, "the-get-indexer-method-locates-the-row-number-of-the-index-from-a-value-if-the-label-is-not-present-minus-one-is-returned-the-value-must-be-an-iterable-here-it-is-a-list"]], "The <font color='green'>if, elif</font>, And <font color='green'>else</font> Statements: <font color='green'>if & elif</font> Statements False, <font color='green'>else</font> Statement Executed": [[4, "the-if-elif-and-else-statements-if-elif-statements-false-else-statement-executed"]], "The <font color='green'>if, elif</font>, And <font color='green'>else</font> Statements: if Statement False, <font color='green'>elif</font> True": [[4, "the-if-elif-and-else-statements-if-statement-false-elif-true"]], "The <font color='green'>if, elif</font>, And <font color='green'>else</font> Statements: if Statement True": [[4, "the-if-elif-and-else-statements-if-statement-true"]], "The <font color='green'>iloc</font> example uses the <font color='green'>index</font> values of 0 and 1 to print the value of \u2018Second\u2019 column.<br>  The <font color='green'>iloc</font> attribute requires the <font color='green'>enumerate</font> function of Python that keeps track of the number<br> of iterations.^{3}  The row is then fixed with <font color='green'>loc</font> and the columns are iterated through to show all<br> the values of the list <font color='green'>x</font>.": [[2, "the-iloc-example-uses-the-index-values-of-0-and-1-to-print-the-value-of-second-column-the-iloc-attribute-requires-the-enumerate-function-of-python-that-keeps-track-of-the-number-of-iterations-3-the-row-is-then-fixed-with-loc-and-the-columns-are-iterated-through-to-show-all-the-values-of-the-list-x"]], "The <font color='green'>items()</font> Method Equivalent To zip Of Keys And Values.": [[5, "the-items-method-equivalent-to-zip-of-keys-and-values"]], "The <font color='green'>items()</font> Method Returns key:value As A List Of Tuples": [[5, "the-items-method-returns-key-value-as-a-list-of-tuples"]], "The <font color='green'>items()</font> method returns a view of key:value pairs as tuples, which are then unpacked into the key and value variables in the for loop. This produces the same output as the earlier key-based iteration but with better performance and style.": [[5, "the-items-method-returns-a-view-of-key-value-pairs-as-tuples-which-are-then-unpacked-into-the-key-and-value-variables-in-the-for-loop-this-produces-the-same-output-as-the-earlier-key-based-iteration-but-with-better-performance-and-style"]], "The <font color='green'>iterrows()</font> method of Pandas iterates over the rows of a DataFrame and returns a tuple of the row\u2019s values.  The example:": [[2, "the-iterrows-method-of-pandas-iterates-over-the-rows-of-a-dataframe-and-returns-a-tuple-of-the-row-s-values-the-example"]], "The <font color='green'>monthrange()</font> method, found in the <font color='green'>calendar</font> module, takes the year and month as parameters. It returns two values: the weekday of the first day of the month and the last calendar day of the month. The <font color='green'>calendar</font> module is imported and the function is demonstrated with the datetime object <font color='green'>time_stamp</font>.": [[7, "the-monthrange-method-found-in-the-calendar-module-takes-the-year-and-month-as-parameters-it-returns-two-values-the-weekday-of-the-first-day-of-the-month-and-the-last-calendar-day-of-the-month-the-calendar-module-is-imported-and-the-function-is-demonstrated-with-the-datetime-object-time-stamp"]], "The <font color='green'>set_index()</font> method makes a column an index. One of the arguments of the method<br> is <font color='green'>inplace</font> that defaults to False.  If assigned True, the DataFrame is permanently changed.<br>  Here it is assigned to a new DataFrame.": [[2, "the-set-index-method-makes-a-column-an-index-one-of-the-arguments-of-the-method-is-inplace-that-defaults-to-false-if-assigned-true-the-dataframe-is-permanently-changed-here-it-is-assigned-to-a-new-dataframe"]], "The <font color='green'>str()</font> function in Python is used to convert numerical and boolean data types into strings. Below are examples showing how integers, floats, and boolean values are transformed into their string representations.": [[11, "the-str-function-in-python-is-used-to-convert-numerical-and-boolean-data-types-into-strings-below-are-examples-showing-how-integers-floats-and-boolean-values-are-transformed-into-their-string-representations"]], "The <font color='green'>str()</font> function outputs a string where dashes separate years, months, and days, and colons separate hours, minutes, and seconds.": [[7, "the-str-function-outputs-a-string-where-dashes-separate-years-months-and-days-and-colons-separate-hours-minutes-and-seconds"]], "The <font color='green'>strptime()</font> method of a datetime object converts a string into a datetime object. This method requires two string arguments: the date\u2019s string representation and the format of the representation as arguments.": [[7, "the-strptime-method-of-a-datetime-object-converts-a-string-into-a-datetime-object-this-method-requires-two-string-arguments-the-date-s-string-representation-and-the-format-of-the-representation-as-arguments"]], "The <font color='green'>timedelta()</font> method allows for the addition or subtraction of time from a datetime object. This method\u2019s parameters are weeks, days, hours, minutes, seconds, microseconds, and milliseconds.  The default values of the arguments are all zero.  The following examples demonstrate the use of this method after it has been imported, rather than using the datetime prefix.": [[7, "the-timedelta-method-allows-for-the-addition-or-subtraction-of-time-from-a-datetime-object-this-method-s-parameters-are-weeks-days-hours-minutes-seconds-microseconds-and-milliseconds-the-default-values-of-the-arguments-are-all-zero-the-following-examples-demonstrate-the-use-of-this-method-after-it-has-been-imported-rather-than-using-the-datetime-prefix"]], "The <font color='green'>try</font> And <font color='green'>except</font>": [[4, "the-try-and-except"]], "The <font color='green'>union()</font> Method Combines Elements Of Sets Without Duplication": [[10, "the-union-method-combines-elements-of-sets-without-duplication"]], "The <font color='green'>update()</font> method allows you to add new key-value pairs or modify existing ones in a dictionary. It takes another dictionary or an iterable of key-value pairs (like a list of tuples) as an argument.": [[5, "the-update-method-allows-you-to-add-new-key-value-pairs-or-modify-existing-ones-in-a-dictionary-it-takes-another-dictionary-or-an-iterable-of-key-value-pairs-like-a-list-of-tuples-as-an-argument"]], "The <font color='green'>zip()</font> function is particularly useful for the third method as it pairs up corresponding elements from the keys list <font color='green'>[\u2018x\u2019,\u2019y\u2019,\u2019z\u2019]</font> with the value lists <font color='green'>[x,y,z]</font>, creating tuples that the dictionary comprehension then converts into key:value pairs.": [[5, "the-zip-function-is-particularly-useful-for-the-third-method-as-it-pairs-up-corresponding-elements-from-the-keys-list-x-y-z-with-the-value-lists-x-y-z-creating-tuples-that-the-dictionary-comprehension-then-converts-into-key-value-pairs"]], "The Append Method": [[0, "the-append-method"]], "The Index Method": [[0, "the-index-method"]], "The NumPy function <font color='green'>vectorize()</font> allows passing NumPy arrays to functions that manipulate scalars or single values.  It\u2019s different from the vectorization of calculations achieved by direct NumPy calculations such as multiplying two arrays. In the example, the function does operate on the arrays and benefits from vectorizing the calculations.": [[1, "the-numpy-function-vectorize-allows-passing-numpy-arrays-to-functions-that-manipulate-scalars-or-single-values-it-s-different-from-the-vectorization-of-calculations-achieved-by-direct-numpy-calculations-such-as-multiplying-two-arrays-in-the-example-the-function-does-operate-on-the-arrays-and-benefits-from-vectorizing-the-calculations"]], "The NumPy library offers efficient numerical procedures that simplify complex calculations. The fundamental object in this library is the NumPy array. Like Pandas, NumPy must be imported before use. Depending on your notebook, you may need to install NumPy before importing it.": [[1, "the-numpy-library-offers-efficient-numerical-procedures-that-simplify-complex-calculations-the-fundamental-object-in-this-library-is-the-numpy-array-like-pandas-numpy-must-be-imported-before-use-depending-on-your-notebook-you-may-need-to-install-numpy-before-importing-it"]], "The NumPy module <font color='green'>linalg</font> includes the <font color='green'>inv()</font> method that returns the inverse of<br> a square matrix. This is often necessary for numerical and statistical calculations.<br> The inverse of multiplied array is calculated using <font color='green'>np.linalg.inv()</font> and then multiplied into <br> <font color='green'>multiplied_array</font>. This results in the identity matrix, with ones on the main diagonal<br> and zeros everywhere else.": [[1, "the-numpy-module-linalg-includes-the-inv-method-that-returns-the-inverse-of-a-square-matrix-this-is-often-necessary-for-numerical-and-statistical-calculations-the-inverse-of-multiplied-array-is-calculated-using-np-linalg-inv-and-then-multiplied-into-multiplied-array-this-results-in-the-identity-matrix-with-ones-on-the-main-diagonal-and-zeros-everywhere-else"]], "The Pandas <font color='green'>Timestamp()</font> is the Pandas equivalent of <font color='green'>datetime</font> and includes some useful attributes.  The example converts a <font color='green'>datetime</font> to a <font color='green'>Timestamp</font> and printing both values and several attributes of Pandas <font color='green'>Timestamp()</font>.^{6}": [[2, "the-pandas-timestamp-is-the-pandas-equivalent-of-datetime-and-includes-some-useful-attributes-the-example-converts-a-datetime-to-a-timestamp-and-printing-both-values-and-several-attributes-of-pandas-timestamp-6"]], "The Sort Method": [[0, "the-sort-method"]], "The Transpose": [[2, "the-transpose"]], "The apply() Method": [[2, "the-apply-method"]], "The array attribute <font color='green'>ndim</font> is the number of axes or dimensions of an array.  The <font color='green'>shape</font> attribute is the<br> size of an array on each axis.  The type of data is dtype. The array <font color='green'>x</font> has one axis, the size of the axis is<br> three, and <font color='green'>dtype</font>  are 64 byte integers.": [[1, "the-array-attribute-ndim-is-the-number-of-axes-or-dimensions-of-an-array-the-shape-attribute-is-the-size-of-an-array-on-each-axis-the-type-of-data-is-dtype-the-array-x-has-one-axis-the-size-of-the-axis-is-three-and-dtype-are-64-byte-integers"]], "The attribute are accessed with the dot notation.  These attributed are demonstrated for <font color='green'>time_stamp</font> by iterating through the results of zipping the lists <font color='green'>attribute_list</font> and <font color='green'>attribute_names</font>.": [[7, "the-attribute-are-accessed-with-the-dot-notation-these-attributed-are-demonstrated-for-time-stamp-by-iterating-through-the-results-of-zipping-the-lists-attribute-list-and-attribute-names"]], "The attributes of <font color='green'>date_difference</font> are days, seconds, and microseconds.  The seconds are converted to hours and minutes and are displayed along with days.": [[7, "the-attributes-of-date-difference-are-days-seconds-and-microseconds-the-seconds-are-converted-to-hours-and-minutes-and-are-displayed-along-with-days"]], "The code demonstrates iterating through the string <font color='green'>finance</font> using two different <font color='green'>for loop</font> approaches.": [[11, "the-code-demonstrates-iterating-through-the-string-finance-using-two-different-for-loop-approaches"]], "The conditional statements in Python are <font color='green'>if, elif</font>, and <font color='green'>else</font>.  In the case of <font color='green'>if</font> and <font color='green'>elif</font> the controlled statements are executed when the condition is true.   The controlled statements of <font color='green'>else</font> are executed when the proceeding <font color='green'>if</font> or <font color='green'>elif</font> statements are false.": [[4, "the-conditional-statements-in-python-are-if-elif-and-else-in-the-case-of-if-and-elif-the-controlled-statements-are-executed-when-the-condition-is-true-the-controlled-statements-of-else-are-executed-when-the-proceeding-if-or-elif-statements-are-false"]], "The docstring is indented and is a multiline comment string.": [[6, "the-docstring-is-indented-and-is-a-multiline-comment-string"]], "The example code cell below uses a <font color='green'>try</font> and <font color='green'>except</font> code block to import NumPy and assigns<br> it the common alias <font color='green'>np</font>.^{1}": [[1, "the-example-code-cell-below-uses-a-try-and-except-code-block-to-import-numpy-and-assigns-it-the-common-alias-np-1"]], "The example code cell below uses a <font color='green'>try</font> and <font color='green'>except</font> code block to import Pandas and assigns<br> it the common alias <font color='green'>pd</font>.^{1}": [[2, "the-example-code-cell-below-uses-a-try-and-except-code-block-to-import-pandas-and-assigns-it-the-common-alias-pd-1"]], "The example demonstrates how a list can contain different data types, even other lists.<br> <font color='green'>list_lists</font> is created from the existing lists <font color='green'>x</font>, <font color='green'>y</font>, and <font color='green'>z</font>. <font color='green'>mixed_list</font> includes, a string, an integer, and a boolean value.": [[0, "the-example-demonstrates-how-a-list-can-contain-different-data-types-even-other-lists-list-lists-is-created-from-the-existing-lists-x-y-and-z-mixed-list-includes-a-string-an-integer-and-a-boolean-value"]], "The file is then assigned to <font color='green'>df_csv</font>, and the initial ten rows are displayed by slicing the <font color='green'>index</font><br> using the <font color='green'>iloc</font> attribute.": [[2, "the-file-is-then-assigned-to-df-csv-and-the-initial-ten-rows-are-displayed-by-slicing-the-index-using-the-iloc-attribute"]], "The first Pandas method demonstrated is <font color='green'>DataFrame()</font>.  The required arguments of the method are<br> the data that must be an iterable: e.g. a list or a dictionary.^{2}  Here the DataFrame <font color='green'>df_bare_bones</font> is <br>created with two simple lists: <font color='green'>x</font> and <font color='green'>y</font>.": [[2, "the-first-pandas-method-demonstrated-is-dataframe-the-required-arguments-of-the-method-are-the-data-that-must-be-an-iterable-e-g-a-list-or-a-dictionary-2-here-the-dataframe-df-bare-bones-is-created-with-two-simple-lists-x-and-y"]], "The first example demonstrates a <font color='green'>for</font> loop, iterating through each character of the string": [[4, "the-first-example-demonstrates-a-for-loop-iterating-through-each-character-of-the-string"]], "The first example is a basic <font color='green'>for loop</font> that assigns each character of the string to the variable <font color='green'>character</font> and then prints it.": [[11, "the-first-example-is-a-basic-for-loop-that-assigns-each-character-of-the-string-to-the-variable-character-and-then-prints-it"]], "The first example tests the boolean value of <font color='green'>finance</font> when the conditional and controlled statements are on one and two lines.": [[4, "the-first-example-tests-the-boolean-value-of-finance-when-the-conditional-and-controlled-statements-are-on-one-and-two-lines"]], "The format string specifies how the date and time components are structured. Year, month, and day arguments (denoted as y, m, and d respectively) must be preceded by a percent sign. A capital Y signifies a four-digit year. For time, hours, minutes, and seconds are represented by the capital letters H, M, and S respectively. Microseconds are an attribute of seconds as \u2018S.%f\u2019. Additionally, the characters used to separate the arguments within the string must be explicitly defined in the format.": [[7, "the-format-string-specifies-how-the-date-and-time-components-are-structured-year-month-and-day-arguments-denoted-as-y-m-and-d-respectively-must-be-preceded-by-a-percent-sign-a-capital-y-signifies-a-four-digit-year-for-time-hours-minutes-and-seconds-are-represented-by-the-capital-letters-h-m-and-s-respectively-microseconds-are-an-attribute-of-seconds-as-s-f-additionally-the-characters-used-to-separate-the-arguments-within-the-string-must-be-explicitly-defined-in-the-format"]], "The fourth example utilizes the <font color='green'>break</font> statement to interrupt the iteration. This achieves an effect similar to the <font color='green'>while</font> loop condition, terminating the loop when the condition is met. Instead of defining a counter, the Python function <font color='green'>enumerate()</font> is used to create an iterable that includes two elements: the number of iterations (index location of each character) and the character.  The <font color='green'>enumerate()</font> function was demonstrated in the Chapter A Quick Look At Strings.": [[4, "the-fourth-example-utilizes-the-break-statement-to-interrupt-the-iteration-this-achieves-an-effect-similar-to-the-while-loop-condition-terminating-the-loop-when-the-condition-is-met-instead-of-defining-a-counter-the-python-function-enumerate-is-used-to-create-an-iterable-that-includes-two-elements-the-number-of-iterations-index-location-of-each-character-and-the-character-the-enumerate-function-was-demonstrated-in-the-chapter-a-quick-look-at-strings"]], "The function accesses the global variable <font color='green'>x</font> that is assigned five.": [[6, "the-function-accesses-the-global-variable-x-that-is-assigned-five"]], "The function defines <font color='green'>x</font> as <font color='green'>global</font> and assigns a new value to existing global variable.": [[6, "the-function-defines-x-as-global-and-assigns-a-new-value-to-existing-global-variable"]], "The function defines the variable <font color='green'>z</font> as <font color='green'>global</font> making it available outside the function.": [[6, "the-function-defines-the-variable-z-as-global-making-it-available-outside-the-function"]], "The iterrows() Method": [[2, "the-iterrows-method"]], "The list <font color='green'>z</font> is returned to its original values [5,6] and then combined with lists <font color='green'>z</font> and <font color='green'>y</font> using the plus sign. The list method <font color='green'>extend</font> may be used to add an iterable to the end of a list. If you are working only with lists, the plus sign is more flexible.  The resulting combined list is then sliced and iterated through using a <font color='green'>for loop</font>.": [[0, "the-list-z-is-returned-to-its-original-values-5-6-and-then-combined-with-lists-z-and-y-using-the-plus-sign-the-list-method-extend-may-be-used-to-add-an-iterable-to-the-end-of-a-list-if-you-are-working-only-with-lists-the-plus-sign-is-more-flexible-the-resulting-combined-list-is-then-sliced-and-iterated-through-using-a-for-loop"]], "The loc and iloc Attributes": [[2, "the-loc-and-iloc-attributes"]], "The method <font color='green'>to_numpy()</font> converts a DataFrame to a NumPy array. All values of the DataFrame are converted to a single type.  Unlike DataFrames, NumPy arrays are not indexed. The value for the -114.56 latitude is accessed with the <font color='green'>iloc</font> attribute.": [[2, "the-method-to-numpy-converts-a-dataframe-to-a-numpy-array-all-values-of-the-dataframe-are-converted-to-a-single-type-unlike-dataframes-numpy-arrays-are-not-indexed-the-value-for-the-114-56-latitude-is-accessed-with-the-iloc-attribute"]], "The most basic grammar rule of Python is naming variables.  The names of variables must start with a character of the alphabet or an underscore (_).  Valid names only include upper and lower case characters of the alphabet, the numbers 0 to 9, and the underscore character.  Variable names are case sensitive.  Because there are no limits on the length of a variable name, names may be chosen to be very descriptive making Python code transparent.  It goes without saying that short names are often convenient. Users should be mindful of the tradeoff between brevity and clarity.": [[3, "the-most-basic-grammar-rule-of-python-is-naming-variables-the-names-of-variables-must-start-with-a-character-of-the-alphabet-or-an-underscore-valid-names-only-include-upper-and-lower-case-characters-of-the-alphabet-the-numbers-0-to-9-and-the-underscore-character-variable-names-are-case-sensitive-because-there-are-no-limits-on-the-length-of-a-variable-name-names-may-be-chosen-to-be-very-descriptive-making-python-code-transparent-it-goes-without-saying-that-short-names-are-often-convenient-users-should-be-mindful-of-the-tradeoff-between-brevity-and-clarity"]], "The number of columns in the first matrix must equal the number of rows in the second matrix<br> in order to perform matrix multiplication. The resulting matrix has elements that are equal to<br> the sum product of the columns and rows. These elements are indexed by the rows and<br> columns. The NumPy method <font color='green'>matmul()</font> can be used to multiply two conforming matrices.<br> In the example provided, <font color='green'>array_method</font> is the first matrix and <font color='green'>transpose_array</font> is the second<br> matrix. Because <font color='green'>transpose()</font> converts rows to columns, the number of columns of the original matrix will equal number of rows of the transposed matrix. The result is <font color='green'>multiplied_array</font>, a square matrix with two rows and two columns.^{3}": [[1, "the-number-of-columns-in-the-first-matrix-must-equal-the-number-of-rows-in-the-second-matrix-in-order-to-perform-matrix-multiplication-the-resulting-matrix-has-elements-that-are-equal-to-the-sum-product-of-the-columns-and-rows-these-elements-are-indexed-by-the-rows-and-columns-the-numpy-method-matmul-can-be-used-to-multiply-two-conforming-matrices-in-the-example-provided-array-method-is-the-first-matrix-and-transpose-array-is-the-second-matrix-because-transpose-converts-rows-to-columns-the-number-of-columns-of-the-original-matrix-will-equal-number-of-rows-of-the-transposed-matrix-the-result-is-multiplied-array-a-square-matrix-with-two-rows-and-two-columns-3"]], "The same exercises could be performed with any iterable.  The first example is repeated with the list created from the string <font color='green'>split()</font> method.": [[4, "the-same-exercises-could-be-performed-with-any-iterable-the-first-example-is-repeated-with-the-list-created-from-the-string-split-method"]], "The second example does the same with the variable <font color='green'>empty</font> that is assigned an empty string.": [[4, "the-second-example-does-the-same-with-the-variable-empty-that-is-assigned-an-empty-string"]], "The second example interrupts the iteration with a <font color='green'>while</font> statement. This loop continues as long as the Boolean value of the <font color='green'>while</font> condition remains True.": [[4, "the-second-example-interrupts-the-iteration-with-a-while-statement-this-loop-continues-as-long-as-the-boolean-value-of-the-while-condition-remains-true"]], "The second example squares the variable <font color='green'>x</font> defined in the function and returns that value.": [[6, "the-second-example-squares-the-variable-x-defined-in-the-function-and-returns-that-value"]], "The second uses the <font color='green'>enumerate()</font> function. This function binds each character (member of the string) to its index location. The loop then produces both the index and the character in each iteration, printing them as pairs.": [[11, "the-second-uses-the-enumerate-function-this-function-binds-each-character-member-of-the-string-to-its-index-location-the-loop-then-produces-both-the-index-and-the-character-in-each-iteration-printing-them-as-pairs"]], "The third example interrupts the iteration with the <font color='green'>continue</font> statement. This statement transfers control back to the beginning of the <font color='green'>for</font> loop skipping the remaining statements within the loop\u2019s current iteration.": [[4, "the-third-example-interrupts-the-iteration-with-the-continue-statement-this-statement-transfers-control-back-to-the-beginning-of-the-for-loop-skipping-the-remaining-statements-within-the-loop-s-current-iteration"]], "The third, fourth, and fifth examples demonstrate the <font color='green'>if, elif</font>, and <font color='green'>else</font> statements.  These examples use the <font color='green'>in</font> operator to determine if a letter is in the string assigned to <font color='green'>finance</font> (a member of the object).": [[4, "the-third-fourth-and-fifth-examples-demonstrate-the-if-elif-and-else-statements-these-examples-use-the-in-operator-to-determine-if-a-letter-is-in-the-string-assigned-to-finance-a-member-of-the-object"]], "The tuples <font color='green'>a</font>, <font color='green'>b</font>, and <font color='green'>c</font> are combined using the plus sign, and the resulting <font color='green'>combined_tuple</font><br> is then sliced and iterated through.": [[12, "the-tuples-a-b-and-c-are-combined-using-the-plus-sign-and-the-resulting-combined-tuple-is-then-sliced-and-iterated-through"]], "The value and the data type of <font color='green'>eleven</font> are printed with the built-in functions <font color='green'>print()</font> and <font color='green'>type()</font>.  The <font color='green'>type()</font> function returns class \u2018int\u2019 indicating that the variable <font color='green'>eleven</font> is an integer. One of the advantages of Python is that it automatically sets the type of a variable when it is assigned.  Unlike many other computer languages, there are no declaration statements.": [[8, "the-value-and-the-data-type-of-eleven-are-printed-with-the-built-in-functions-print-and-type-the-type-function-returns-class-int-indicating-that-the-variable-eleven-is-an-integer-one-of-the-advantages-of-python-is-that-it-automatically-sets-the-type-of-a-variable-when-it-is-assigned-unlike-many-other-computer-languages-there-are-no-declaration-statements"]], "The values of rows and columns can be accessed by iterating through a DataFrame\u2019s <font color='green'>columns</font><br> or <font color='green'>index</font>.  Here the values of the labels of <font color='green'>columns</font> and <font color='green'>index</font> are printed.": [[2, "the-values-of-rows-and-columns-can-be-accessed-by-iterating-through-a-dataframe-s-columns-or-index-here-the-values-of-the-labels-of-columns-and-index-are-printed"]], "The variable <font color='green'>x</font> is assigned a value outside of the function and is now global.  Nevertheless, <font color='green'>giving_something_back()</font> defines a local variable <font color='green'>x</font> that exists only in the function. The code assigns five to the global variable <font color='green'>x</font> and then calls <font color='green'>giving_something_back()</font> that returns the squared value of two that is assigned to <font color='green'>x</font> in the function.": [[6, "the-variable-x-is-assigned-a-value-outside-of-the-function-and-is-now-global-nevertheless-giving-something-back-defines-a-local-variable-x-that-exists-only-in-the-function-the-code-assigns-five-to-the-global-variable-x-and-then-calls-giving-something-back-that-returns-the-squared-value-of-two-that-is-assigned-to-x-in-the-function"]], "There are seven basic arithmetic operators of Python and the associated code.": [[8, "there-are-seven-basic-arithmetic-operators-of-python-and-the-associated-code"]], "There is no need to order keyword arguments.": [[6, "there-is-no-need-to-order-keyword-arguments"]], "These include:": [[4, "these-include"]], "Three Important Attributes Of Arrays": [[1, "three-important-attributes-of-arrays"]], "To start, we assign the string \u201cFinance\u201d to the variable <font color='green'>finance</font>:": [[4, "to-start-we-assign-the-string-finance-to-the-variable-finance"]], "Transpose With Method <font color='green'>transpose()</font>, <font color='green'>T</font> For Shorthand.": [[2, "transpose-with-method-transpose-t-for-shorthand"]], "Transposing Arrays Or Matrices": [[1, "transposing-arrays-or-matrices"]], "Tuples, similar to lists, can be instantiated (created) in multiple ways. They can be created using round brackets (parentheses) with commas to separate data, by using the <font color='green'>tuple()</font> constructor with iterable data, or with a constructor and a generator expression that iterates through data. Unlike lists, tuple values cannot be changed after instantiation.": [[12, "tuples-similar-to-lists-can-be-instantiated-created-in-multiple-ways-they-can-be-created-using-round-brackets-parentheses-with-commas-to-separate-data-by-using-the-tuple-constructor-with-iterable-data-or-with-a-constructor-and-a-generator-expression-that-iterates-through-data-unlike-lists-tuple-values-cannot-be-changed-after-instantiation"]], "Two Keyword Arguments: Position Irrelevant": [[6, "two-keyword-arguments-position-irrelevant"]], "Two Positional Arguments Assigned In The order Of Parameters": [[6, "two-positional-arguments-assigned-in-the-order-of-parameters"]], "Type Hints And Docstrings": [[6, "type-hints-and-docstrings"]], "Type hints specify the expected types of arguments and returned values. <font color='green'>Docstrings</font> provide brief documentation to clarify a function\u2019s rules and purpose. Type hints are added to <font color='green'>square_value_div()</font> with default arguments. The type of data returned follows the dash and greater than sign. The type of data is shown after colon following the parameter name.  The Union type is imported from typing indicating that provided values should be integers or floating points.^{2}.  Because the function returns a string if the argument of <font color='green'>y</font> is zero, the return types are float or str.": [[6, "type-hints-specify-the-expected-types-of-arguments-and-returned-values-docstrings-provide-brief-documentation-to-clarify-a-function-s-rules-and-purpose-type-hints-are-added-to-square-value-div-with-default-arguments-the-type-of-data-returned-follows-the-dash-and-greater-than-sign-the-type-of-data-is-shown-after-colon-following-the-parameter-name-the-union-type-is-imported-from-typing-indicating-that-provided-values-should-be-integers-or-floating-points-2-because-the-function-returns-a-string-if-the-argument-of-y-is-zero-the-return-types-are-float-or-str"]], "Useful attributes of a datetime object are the:": [[7, "useful-attributes-of-a-datetime-object-are-the"]], "Using <font color='green'>while</font> To Interrupt Iteration": [[4, "using-while-to-interrupt-iteration"]], "Using Break To Interrupt A For Loop": [[4, "using-break-to-interrupt-a-for-loop"]], "Using The <font color='green'>continue</font> Statement To Control A <font color='green'>for</font> Loop": [[4, "using-the-continue-statement-to-control-a-for-loop"]], "Valid": [[3, "valid"]], "Valid Names For Variables": [[3, "valid-names-for-variables"]], "Vectorize Functions": [[1, "vectorize-functions"]], "What is MyST?": [[14, "what-is-myst"]], "When a function is created, default arguments may be assigned to its parameters. Any parameters with default arguments must appear after those without. For instance, in <font color='green'>square_value_div()</font>, the default arguments for <font color='green'>x</font> and <font color='green'>y</font> are zero and one, respectively.": [[6, "when-a-function-is-created-default-arguments-may-be-assigned-to-its-parameters-any-parameters-with-default-arguments-must-appear-after-those-without-for-instance-in-square-value-div-the-default-arguments-for-x-and-y-are-zero-and-one-respectively"]], "When the Python interpreter parses the value assigned to a variable, a type is assigned to the data stored at that address. The basic data types of Python that hold single values are numbers, booleans or true/false values, and strings.  Other data types including binary, complex, octal, and hexadecimal are ignored. Integers, floating points, and booleans are less complex than strings.": [[8, "when-the-python-interpreter-parses-the-value-assigned-to-a-variable-a-type-is-assigned-to-the-data-stored-at-that-address-the-basic-data-types-of-python-that-hold-single-values-are-numbers-booleans-or-true-false-values-and-strings-other-data-types-including-binary-complex-octal-and-hexadecimal-are-ignored-integers-floating-points-and-booleans-are-less-complex-than-strings"]], "^{1} For a discusion of  <font color='green'>try</font> and <font color='green'>except</font> code blocks see Chapter Control Statements.": [[1, "for-a-discusion-of-try-and-except-code-blocks-see-chapter-control-statements"]], "^{1} For a discussion of  <font color='green'>try</font> and <font color='green'>except</font> code block see the Chapter Control Statements.": [[2, "for-a-discussion-of-try-and-except-code-block-see-the-chapter-control-statements"]], "^{1} Like other control statements, functions can be on a single line.  But the efficacy of such functions is a single line of code. Redundant code is created and clarity is not improved.": [[6, "like-other-control-statements-functions-can-be-on-a-single-line-but-the-efficacy-of-such-functions-is-a-single-line-of-code-redundant-code-is-created-and-clarity-is-not-improved"]], "^{2} If you need a little help with this concept check out Chapter A First Look At Lists.": [[2, "if-you-need-a-little-help-with-this-concept-check-out-chapter-a-first-look-at-lists"]], "^{2} If you need a little help with this concept see Chapter A First Look At Lists.": [[1, "if-you-need-a-little-help-with-this-concept-see-chapter-a-first-look-at-lists"]], "^{2} The function returns a value complex number as well.": [[6, "the-function-returns-a-value-complex-number-as-well"]], "^{3.} Gemini provides a nice explanation of the <font color='green'>enumerate</font> function.": [[2, "gemini-provides-a-nice-explanation-of-the-enumerate-function"]], "^{3}The volumes use the <font color='green'>matmul()</font> method to multiply matrices; the ampersand symbol (@) can also be used for this purpose,<br> but <font color='green'>matmul()</font> is preferred for clarity.": [[1, "the-volumes-use-the-matmul-method-to-multiply-matrices-the-ampersand-symbol-can-also-be-used-for-this-purpose-but-matmul-is-preferred-for-clarity"]], "^{4} For an introduction to dictionaries see Chapter A Quick Introduction To Dictionaries.": [[2, "for-an-introduction-to-dictionaries-see-chapter-a-quick-introduction-to-dictionaries"]], "^{5} For a discussion of lambda functions see A Quick Look At Functions.": [[2, "for-a-discussion-of-lambda-functions-see-a-quick-look-at-functions"]], "^{6} For introduction to the datetime module see Chapter A Quick Introduction To Manipulating Dates.": [[2, "for-introduction-to-the-datetime-module-see-chapter-a-quick-introduction-to-manipulating-dates"]], "and returns a value of (2**2)/4 = 1.0": [[6, "and-returns-a-value-of-2-2-4-1-0"]], "and two is the argument used when the function is called.": [[6, "and-two-is-the-argument-used-when-the-function-is-called"]], "calendar Module monthrange() Method": [[7, "calendar-module-monthrange-method"]], "date() Object": [[7, "date-object"]], "iloc Attribute": [[2, "iloc-attribute"]], "lambda: Anonymous Functions Often Used In Pandas": [[6, "lambda-anonymous-functions-often-used-in-pandas"]], "loc Attribute": [[2, "loc-attribute"]], "outside of that function will result in an error since <font color='green'>x</font> is not defined outside of the function.": [[6, "outside-of-that-function-will-result-in-an-error-since-x-is-not-defined-outside-of-the-function"]], "relativedelta From datetutil Library More Convenient Than timedelta() Method": [[7, "relativedelta-from-datetutil-library-more-convenient-than-timedelta-method"]], "return is a reserved name": [[3, "return-is-a-reserved-name"]], "timedelta() Method": [[7, "timedelta-method"]]}, "docnames": ["A_First_Look_At_Lists", "An_Introduction_To_NumPy", "An_Introduction_To_Pandas", "Basic_Grammar", "Control_Statements", "Dictionaries", "Functions", "Manipulating_Dates", "Numbers_&_Booleans", "README", "Sets", "Strings", "Tuples", "intro", "markdown", "markdown-notebooks", "notebooks"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9}, "filenames": ["A_First_Look_At_Lists.ipynb", "An_Introduction_To_NumPy.ipynb", "An_Introduction_To_Pandas.ipynb", "Basic_Grammar.ipynb", "Control_Statements.ipynb", "Dictionaries.ipynb", "Functions.ipynb", "Manipulating_Dates.ipynb", "Numbers_&_Booleans.ipynb", "README.md", "Sets.ipynb", "Strings.ipynb", "Tuples.ipynb", "intro.md", "markdown.md", "markdown-notebooks.md", "notebooks.ipynb"], "indexentries": {}, "objects": {}, "objnames": {}, "objtypes": {}, "terms": {"": [14, 15, 16], "0": [0, 1, 4, 7, 12, 16], "00": [2, 7], "000000": 7, "0000000e": [], "01": 2, "0147": 2, "01oy0yej": 2, "02": 2, "0313": 2, "04": 2, "06": 7, "067751": 2, "08553692": 1, "09861229": 1, "0j": 4, "0x7f74f46b1b50": [], "0x7fd2041621c0": 16, "1": [0, 3, 4, 5, 8, 10, 11, 12, 16], "10": [0, 1, 2, 6, 7, 11, 16], "100": [13, 16], "1015": 2, "103600": 2, "1038": [], "1039": [], "1040": [], "1041": [], "1042": [], "1056": 2, "105832": 2, "1060415269": [], "1068": [], "1069": [], "1070": [], "1071": [], "1072": [], "111111": 2, "111400": 2, "1129": 2, "117": 2, "1175": 2, "1189": [], "1190": [], "1191": [], "1192": [], "1193": [], "1194": 2, "12": 7, "124": 2, "1244": 2, "1283": 2, "1298": 2, "1304340071": [], "1353120783": 6, "135484": 2, "1360129314": 3, "1387": 2, "14": [1, 2, 7], "1454": 2, "1497": 2, "15": 2, "1501": 2, "154812": 2, "158": 2, "15th": 7, "16": [], "164474": 2, "1666666666666": 7, "168": 2, "17": 2, "17000": 2, "1700e": 2, "174": 2, "1782": 2, "18": 1, "182": [], "1820": 2, "1841": 2, "19": 2, "1901": 2, "1908": 2, "1917": 2, "19680801": 16, "1j": 4, "1zswcxd": [], "2": [3, 4, 5, 7, 8, 10, 11, 12, 15], "20": [1, 2], "2000010": 7, "200010": 7, "2000e": 2, "2014": 14, "2025": 2, "2027": 7, "21": 2, "2177275876": 3, "2199279064": 3, "220": [], "221": [], "2217": 2, "222": [], "223": [], "224": [], "226": 2, "2349": 2, "236": 2, "239": 2, "24": 7, "2438054105": 3, "244275": 2, "25": [2, 6], "2531807808": [], "26": 2, "262": 2, "2672": 2, "2677": 2, "27": 2, "270": 2, "271": 2, "2772980581": 5, "29": 2, "2907": 2, "2j": 4, "3": [0, 3, 4, 5, 8, 10, 12], "30": [2, 7], "300": 2, "309": 2, "31": [2, 7], "310": [], "311": [], "312": [], "313": [], "3134": 2, "32": 1, "326": 2, "33": 2, "3300e": 2, "333": 2, "337": 2, "34": 2, "3438": 2, "35": 2, "3571": 2, "3575374214": [], "36": 2, "362": [], "363": [], "364": [], "365": [], "366": [], "369": 2, "3690e": 2, "375": 2, "3870892855": 3, "3890561": 1, "394": 2, "3_plus_x": 3, "4": [0, 1, 3, 4, 5, 7, 8, 12, 15, 16], "40": 2, "4031431944": 3, "41": 2, "4113901217": [], "4115913051": 0, "456": 2, "46": 2, "463": 2, "465": 2, "47": 2, "472": 2, "478": 2, "4789": 2, "480": [], "481": [], "48100": 2, "482": [], "483": [], "484": [], "48500": 2, "487179": 2, "49": 6, "491150": 2, "4936": 2, "4th": 0, "5": [1, 3, 5, 6, 11, 12, 16], "50": [], "502777777777778": 7, "51": [], "515": 2, "5179": 2, "52": 2, "52210": 7, "528": 2, "53": [], "531": 2, "54": 2, "552": 2, "5612": 2, "57": 2, "5700e": 2, "58": 2, "584": [], "58400": 2, "585": [], "586": [], "587": [], "588": [], "59": 2, "5th": 0, "6": [1, 5, 7, 12], "60": [2, 7], "61": [2, 7], "624": 2, "63": 2, "633": 2, "64": 2, "641699163": 3, "6509": 2, "6509e": 2, "65500": 2, "66900": 2, "671": 2, "6768": 2, "680": 2, "69": 2, "69314718": 1, "6sl34elforsew3xbkfuizpacmu6zq": [], "7": [0, 1, 2, 5, 6], "700": [], "7000e": 2, "701": [], "702": [], "703": [], "704": [], "7083": 2, "709": [], "710": [], "711": [], "712": [], "713": [], "718220": 2, "71828183": 1, "720": 2, "73400": 2, "74000": 2, "7400e": 2, "7650": 2, "77": 1, "787": 2, "79000": 2, "8": [2, 8], "80": 2, "80100": 2, "806": 2, "809": [], "810": [], "811": [], "812": 2, "813": [], "8200": 2, "82400": 2, "83": 2, "84": 2, "85700": 2, "85800": 2, "8601": [], "870": 7, "8817842e": [], "8foebx6137zspvq5d5rqd9f2f": 2, "8vr4pq42p99zxu5lc9qe6": 2, "9": [2, 11], "907": 2, "9250": 2, "94600": 2, "9797": 2, "A": 13, "AND": 4, "And": 13, "As": 16, "At": 13, "But": 16, "By": 11, "For": [5, 11, 14, 16], "If": [12, 15], "In": 14, "It": [4, 11, 14], "Its": 11, "NOT": [4, 7], "No": [], "Not": 8, "Of": 0, "One": [], "Or": [], "That": [4, 15], "The": [13, 14, 15], "Then": [4, 11], "There": [13, 16], "These": 13, "To": 13, "With": 15, "_3": 3, "__init__": [], "__main__": 6, "__peg_parser__": 3, "_base": [], "_decor": [], "_engin": [], "_failover_to_python": [], "_ioncontext": 16, "_make_engin": [], "_open_handl": [], "_read": [], "abc": 4, "about": [11, 14, 15, 16], "abov": 4, "absent": 11, "absolut": 4, "accept": 14, "access": [0, 4], "accord": 7, "accumul": 4, "achiev": 0, "act": 11, "actual": [4, 11, 12], "ad": 10, "add": [7, 10, 11], "add_": 16, "addit": 8, "after": [0, 4, 11, 13], "again": [4, 10], "align": 16, "all": [0, 4, 10, 12, 14, 15], "allow": [3, 4, 6, 11, 13, 14], "alongsid": 5, "alreadi": [5, 7, 10], "also": [4, 5, 6, 11, 14, 15, 16], "alter": 6, "although": 3, "alwai": 11, "am": 7, "amount": 7, "an": [10, 14], "anaconda3": [], "anc": 11, "ani": [3, 10, 13, 15], "anoth": [4, 6], "answer": 4, "anywher": [4, 6], "apostroph": [], "appear": [7, 11], "append": 4, "appli": 11, "approach": [0, 10], "ar": [13, 14, 15], "arg": 6, "argument": [4, 11], "arrai": 16, "assert": 3, "assign": 5, "assum": [4, 7], "async": 3, "attempt": [4, 7, 12], "auditori": 14, "australia": 14, "automat": [6, 10, 11], "avail": [], "avg_bedroom": 2, "avoid": 10, "await": 3, "ax": 16, "b": [1, 5, 11], "base": [0, 6, 15], "base_pars": [], "basi": 13, "basic": 13, "becaus": 11, "becom": [4, 11], "been": [4, 5], "befor": [0, 4], "begin": [0, 16], "being": 14, "between": [4, 7, 11], "beyond": [4, 13], "bib": 14, "bibliographi": 14, "bibtex": 14, "binari": [], "binder": 13, "block": [12, 15], "book": [13, 14, 15, 16], "bool": [4, 6, 8, 11], "boolean": 13, "both": [0, 4, 5, 7, 14], "bound": 4, "box": 14, "brace": [5, 10], "branch": 4, "break": 3, "breakdown": 7, "brian": 14, "brisban": 14, "broad": 4, "browser": 13, "build": [4, 14], "built": [4, 5, 15], "builtin": 8, "builtin_funct": 7, "bypass": 13, "bytesio": [], "c": [0, 5, 11], "c_parser_wrapp": [], "cache_d": [], "calcul": [4, 6], "call": [0, 4, 5, 10, 11, 14], "can": [13, 14, 15, 16], "captur": 0, "case": 6, "catch": [4, 5, 12], "caus": 4, "ce": 11, "cell": 13, "centuri": 7, "chain": 10, "chang": 6, "char": 4, "check": [4, 6, 11, 16], "choic": 13, "christoph": 14, "chunksiz": [], "cite": 14, "class": [3, 7, 11], "cleaner": 5, "clear": 7, "click": 13, "clock": 7, "close": [], "cm": 16, "cmap": 16, "code": [5, 7, 13, 14, 15], "cognit": 14, "colab": 13, "cold": 16, "collect": [4, 10], "color": 16, "com": 2, "comback": 3, "combin": 7, "comeback": 3, "command": 15, "comment": [], "common": [0, 4, 12], "commonmark": 14, "commun": 6, "compar": 5, "comparison": 11, "complet": 4, "complex": 10, "comprehens": 12, "compress": [], "concaten": [0, 4], "concis": [0, 4, 5], "condit": 10, "confer": 14, "confirm": 4, "consequ": 4, "consid": [4, 11], "consol": [4, 6], "constructor": [7, 11], "contain": [4, 5, 7, 10], "content": [14, 15], "content_or_path": [], "context": [4, 7], "continu": 3, "control": [7, 13], "convent": 12, "convert": [4, 10, 12, 15], "convert_float": [], "coolwarm": 16, "copi": 13, "core": 13, "corner": 13, "correctli": 0, "correspond": [0, 7], "cortex": 14, "could": 3, "count": 0, "counter": 11, "crash": 5, "creat": [11, 16], "creation": [0, 10], "crucial": 6, "current": [10, 11, 13], "cursor": 13, "custom": 7, "custom_lin": 16, "cycler": 16, "d": [5, 15], "data": 16, "date": 13, "date_pars": [], "date_tim": 2, "datetim": [], "datetime_method": 7, "day_of_week": 2, "dayfirst": [], "dd": 7, "de": 14, "decim": [3, 7], "def": [1, 2, 3], "default": [5, 15], "defin": [0, 5, 10, 15], "define_existing_glob": 6, "del": 3, "delim_whitespac": [], "delimit": [], "demonstr": 5, "denor": [], "denot": 4, "depend": [6, 14], "descript": [0, 6, 7], "design": [4, 13], "desir": 7, "detail": 15, "df_exce_new_index": 2, "df_excel": 2, "df_transpos": 2, "dialect": [], "dict_item": 5, "dict_kei": 5, "dict_valu": 5, "dictat": 4, "dictionari": 13, "differ": [7, 14], "difference_in_dai": 7, "difference_in_hour": 7, "difference_in_minut": 7, "dimensit": 1, "direct": [0, 5, 10, 12, 15], "directli": [11, 13], "discus": [], "displai": [0, 1, 4, 5, 15], "divers": 7, "divid": [6, 7], "divis": 6, "divisor": 6, "dl": 2, "do": [5, 14, 16], "document": [14, 15, 16], "doe": [3, 7], "doesn": [6, 12], "dollar": 16, "done": [], "doublequot": [], "download": 13, "drive": [], "drive_link": [], "dtype": 2, "duplic": [], "durat": 7, "dure": 4, "dynam": 5, "e": [1, 4, 7], "each": [7, 10, 12, 13], "ecosystem": 14, "effici": 5, "either": 4, "element": 12, "elif": 3, "elimin": 10, "els": 3, "elsewher": 4, "emb": 16, "empti": [0, 5], "empty_str": 11, "enabl": 7, "encod": [], "encoding_error": [], "encount": 11, "end": 16, "engin": [], "ensur": [4, 6], "enter": 3, "entir": [4, 6], "enumer": 1, "equal": [4, 6], "equival": 0, "errno": [], "error": 4, "error_bad_lin": [], "escap": [11, 16], "escapechar": [], "especi": 13, "essenti": 7, "etc": [4, 16], "euler_to_x": 1, "evalu": [4, 7, 11], "even": [4, 11], "evid": 14, "exact": 4, "exactli": 7, "exampl": [14, 16], "example_dateimt": [], "example_datetim": 7, "excel_numpi": 2, "excelfil": [], "exceot": [], "except": 3, "exclud": 4, "exclus": 11, "execut": 15, "exhaust": 4, "exist": [4, 7, 10, 11, 12], "exp": 1, "expect": [0, 4], "explicitli": [4, 6], "expon": 8, "exposur": 13, "express": [10, 11], "ext": [], "extens": 14, "extract": [0, 4, 7], "f": [0, 4], "failur": 5, "fals": 3, "false_valu": [], "falsi": [4, 11], "fewer": 4, "ffffff": 7, "fi": [2, 11], "fiac": 4, "fianc": [], "fifth": 0, "fig": 16, "figsiz": 16, "file": [3, 15], "filenotfounderror": [], "filepath_or_buff": [], "filter": 4, "fin": 4, "fina": 11, "final": [3, 4, 5], "financ": 0, "finance_fun": 11, "find": [0, 11, 12], "fine": 5, "finish": 4, "first": [3, 12, 13], "first_dict": 5, "first_occur": 2, "first_row": 1, "fix": 16, "flavor": 14, "flexibl": 7, "float": 4, "float64": 2, "float64index": 2, "float_precis": [], "fly": [5, 10, 12], "focu": 13, "follow": [4, 12, 14, 15], "form": 4, "format_string_d": 7, "found": [2, 4, 11, 12], "four": [0, 3], "fourth": 0, "fraction": 7, "from": [3, 10, 16], "frontier": 14, "full": [2, 7], "fun": 11, "func": [], "function": [0, 12, 13, 14], "g": [4, 7], "gener": [7, 10], "get": [3, 7, 13, 14, 15], "get_handl": [], "get_loc": 2, "give": [3, 7], "given": 5, "giving_something_back_glob": 6, "global": 3, "goal": 13, "googl": [], "gracefulli": 5, "gradual": 4, "grammar": 13, "greater": 11, "guarante": 10, "guid": 16, "h": 0, "ha": [4, 5, 12, 13], "hand": 2, "handl": [4, 5, 6, 11], "happen": 6, "has_index_nam": [], "have": [4, 12, 13, 15], "hdhpk14": 14, "header": [], "heer": 14, "hello": 4, "help": [3, 6, 13, 14], "here": [3, 6, 14, 16], "hh": 7, "highest": 4, "hold": [4, 6, 7], "holdgraf": 14, "holdgraf_evidence_2014": 14, "hot": 16, "housing_median_ag": 2, "hover": 13, "how": [4, 5, 15], "html": 16, "http": 2, "human": [7, 14], "hyphen": 7, "i": [13, 15, 16], "icon": 13, "ident": [4, 5, 10], "identifi": 7, "ignor": 10, "ii": 16, "imag": 16, "immedi": 4, "impli": 4, "implicitli": 6, "import": [0, 3, 4, 16], "includ": [6, 15, 16], "inclus": 11, "increment": [4, 5], "indentationerror": 3, "index": 5, "index_col": [], "index_valu": 2, "indic": [2, 4, 11, 12], "individu": [0, 7, 11, 13], "infer_datetime_format": [], "inform": [11, 15, 16], "init": 15, "initi": 4, "inlin": 14, "input": [0, 3, 7, 14], "insert": 14, "inspect_excel_format": [], "instead": [5, 6], "instruct": 15, "int": [4, 6, 11], "int64": 1, "integ": 4, "intend": 6, "interact": [13, 16], "intern": 14, "interven": 4, "introduct": [], "introductin": [], "introducton": [], "invalid": 6, "inverse_multiplied_arrai": 1, "io": [], "ioarg": [], "iohandl": [], "ion": 16, "ipykernel_16749": 0, "ipykernel_16811": [], "ipykernel_16845": 5, "ipykernel_16862": 6, "ipykernel_17107": [], "ipykernel_17171": [], "ipykernel_17207": [], "ipykernel_17225": [], "ipykernel_18214": 3, "ipykernel_26555": [], "ipykernel_26573": [], "ipykernel_26591": [], "ipykernel_26617": [], "ipykernel_26635": [], "ipykernel_26653": [], "ipykernel_29053": [], "ipykernel_29071": [], "ipykernel_29089": [], "ipykernel_29115": [], "ipykernel_29151": [], "ipykernel_29169": [], "ipykernel_29378": [], "ipykernel_31734": [], "ipykernel_31752": [], "ipykernel_31770": [], "ipykernel_31799": [], "ipykernel_31856": [], "ipykernel_31875": [], "ipykernel_35503": [], "ipynb": 14, "ipython": 3, "is_colab": [], "is_month_end": 2, "is_text": [], "isinst": [], "isn": 10, "iso": [], "issu": 4, "item": [4, 11], "iter": 10, "its": [4, 5, 7, 12], "itself": 11, "j": 4, "join": [0, 4, 11], "june": 7, "jupyt": [13, 14, 15, 16], "jupyterbook": 14, "jupytext": 15, "just": [6, 11, 13, 14], "keep": 16, "keep_date_col": [], "keep_default_na": [], "kei": [], "kernel": 15, "kind": 14, "knight": 14, "known": 10, "kwarg": [], "kwd": [], "kwds_default": [], "l": 0, "la_": 16, "label": [0, 11], "lambda": 3, "languag": 14, "largest": 0, "last": [0, 5, 6, 10], "launch": 13, "left": 7, "legend": 16, "len": 4, "length": 4, "less": 4, "let": [6, 11, 15], "letter": 3, "lettercharact": [], "lib": [], "librari": [], "like": [4, 7, 14, 15], "limit": [4, 11, 13], "line": [5, 12, 14, 15, 16], "line2d": 16, "liner": 4, "linetermin": [], "link": [], "linspac": 16, "list": [3, 11, 13], "list_financial_python": 0, "list_numb": 10, "liter": [3, 4, 7, 10, 11], "littl": 13, "live": 13, "ll": 14, "log": 1, "log_x": 1, "logic": 4, "logspac": 16, "look": 13, "lookup": 5, "loop": [], "lot": [14, 16], "low_memori": [], "lowercas": [4, 11], "lowest": 11, "lw": 16, "m": 1, "mai": [7, 13], "main": 13, "make": [11, 16], "mangle_dupe_col": [], "mani": [4, 13, 14, 15], "manipul": 13, "map": [], "markdown": [], "markdownfil": 15, "markedli": 14, "markup": 14, "match": 7, "math": [4, 16], "mathemat": [4, 6], "matplotlib": 16, "maximum": 11, "maxsplit": 11, "mbox": 16, "md": [14, 15], "mean": [0, 6, 11, 16], "median_house_valu": 2, "median_incom": 2, "medium": 16, "memory_map": [], "mention": 4, "messag": [4, 6], "method": [], "micro": 7, "midnight": 7, "might": 13, "minut": 13, "miss": [], "mix": 0, "mm": 7, "mode": [], "modif": 6, "modifi": [0, 11], "modul": [0, 4, 5, 6], "more": [3, 4, 10, 15, 16], "moreov": 14, "most": [0, 5, 6, 12, 14], "move": 4, "multipl": [6, 8, 10, 11], "must": [4, 13, 14], "myfunc": 1, "n": [0, 1, 4, 11, 14, 16], "na_filt": [], "na_valu": [], "name": [4, 7], "nameerror": 6, "nanc": 11, "natur": 1, "necessari": 6, "need": [13, 15], "neg": 4, "neither": 4, "neurosci": 14, "new": [4, 10, 11, 13], "newli": 11, "newlin": [4, 11], "next": [4, 11], "non": [4, 11], "none": [3, 4, 5, 6, 11], "nonloc": 3, "nor": 4, "notat": 0, "note": [0, 4, 5, 7, 10, 12, 14], "notebook": [13, 14], "noth": [5, 11], "notic": 10, "now": 4, "np": 16, "nrow": [], "nstart": 0, "nthe": 0, "number": [7, 10, 13], "numer": 4, "numpi": [13, 16], "o": 0, "object": [5, 11], "observ": 7, "obtain": 6, "occur": [0, 4], "occurr": [11, 12], "off": [14, 15], "old": 11, "omit": 11, "on_bad_lin": [], "onc": [], "one": [5, 10, 12, 14], "onli": [4, 7, 10, 11], "open": 13, "oper": [0, 6, 10], "opinion": 11, "oppos": 8, "option": [11, 13], "order": 10, "org": 14, "origin": [4, 7, 10, 11], "other": [4, 13, 15], "otherwis": [1, 4], "our": 13, "out": 16, "output": [0, 4, 6, 11, 15], "over": [4, 7, 11, 13], "overview": 14, "p": 0, "packag": [], "pad": 7, "page": [14, 15], "pair": 10, "panda": 13, "pandas_time_stamp": 2, "pars": 7, "parse_d": [], "parser": [], "parserbas": [], "part": 4, "paslei": 14, "pass": [3, 5, 11], "path": 15, "path_or_buf": [], "path_or_buff": [], "pdf": [], "per": 12, "perform": [6, 11], "period": 7, "phrase": 11, "pick_url": [], "piec": 11, "pip": [1, 2], "place": [0, 11], "plot": 16, "plt": 16, "plu": 3, "point": 4, "pointer": 4, "pop": [], "popul": 2, "portion": 0, "posit": [0, 4, 11, 12], "possibl": 6, "post": 16, "potenti": 6, "power": 14, "practic": 13, "preced": 4, "precis": 7, "predefin": 4, "predict": 14, "prefix": [], "presenc": [4, 15], "present": [4, 11], "prevent": 4, "previou": 5, "previous": 5, "primer": 13, "print": [0, 1, 3, 4, 5, 7, 10, 12, 15], "prioriti": 4, "proce": 4, "process": 4, "produc": 12, "program": [5, 6, 12, 13], "project": [], "promot": 6, "prop_cycl": 16, "properli": 14, "provid": 13, "purpos": 14, "py": [0, 3, 5, 6], "pyi": [], "pyplot": 16, "python": 12, "python3": [], "python_fun": 11, "pythonfin": 11, "quick": 13, "quot": [], "quotechar": [], "r": [], "rais": [1, 3, 4, 6, 7, 12], "ramsai": 14, "randn": 16, "random": 16, "rang": 16, "rather": [4, 6], "rb": [], "rcparam": 16, "re": 13, "reach": 4, "read_excel": 2, "readabl": 7, "reader": 13, "realnumb": 4, "recent": [0, 5, 6], "refer": [0, 14], "regardless": [4, 7], "regular": [5, 14], "relat": 13, "relev": [], "remain": [5, 6, 7, 11], "remov": [4, 10, 11], "render": 14, "replac": 11, "repres": 6, "reproduc": 16, "requir": [], "research": [], "reset": 0, "resourc": 13, "rest": [4, 15], "result": [4, 5, 11], "retriev": 5, "return": 4, "right": 13, "rlkei": 2, "robert": 14, "robust": 6, "row_numb": 1, "run": [4, 13, 15], "runtim": 6, "safe": [5, 12], "same": [0, 10, 11, 14], "sampl": 16, "scl": 2, "scope": 6, "search": [4, 12], "second_dict": 5, "second_row": 1, "second_tupl": 5, "section": 11, "see": [7, 14, 15, 16], "seed": 16, "select": 4, "self": [], "sensit": 4, "sentinel": 12, "sep": [], "separ": 5, "sequenc": [0, 4, 12], "serv": [4, 14], "set": [0, 4, 13], "set_i": 10, "set_union": 10, "set_x": 10, "set_z": 10, "sever": 13, "share": 1, "sheet": 2, "sheet_nam": 2, "short": 2, "should": 15, "should_clos": [], "show": [0, 12, 14, 15], "sign": 16, "silent": 5, "similar": [7, 14], "simpl": 14, "simpli": 13, "simultan": [7, 13], "sinc": [4, 5, 10, 11], "singl": 0, "site": [], "skip_blank_lin": [], "skipfoot": [], "skipinitialspac": [], "skiprow": [], "slash": 7, "slice": [], "slice_first_four_elements_x_y_z": 0, "slice_start_fifth_element_x_y_z": 0, "slight": 14, "small": 14, "smallest": 0, "so": [6, 7, 10, 11, 13, 15], "some": [4, 14, 16], "sourc": [], "space": [4, 7, 11], "span": 14, "special": 14, "specif": [0, 4, 14], "specifi": [4, 11], "sphinx": 14, "split": 11, "split_fin": 4, "sqrt": 4, "square_valu": 6, "squared_valu": 6, "squeez": [], "src": [], "ss": 7, "st": 2, "stacklevel": [], "stand": 14, "start": [0, 7, 14, 15], "starter": 14, "state": [5, 16], "statement": [5, 13], "still": 0, "stop": 11, "storage_opt": [], "store": [0, 4, 6, 14], "straightforward": 0, "strftime": 7, "string": 13, "string_dat": 7, "structur": 14, "subplot": 16, "subsequ": 4, "substitut": 11, "substr": [4, 11], "subtract": 8, "success": [4, 7], "support": [13, 15], "sure": 16, "sy": [], "syntax": [13, 14], "syntaxerror": 3, "t": [0, 6, 10, 14, 16], "tab": [4, 13], "take": [0, 11], "tbeyond": [], "tex": 16, "text": [14, 15], "textfileread": [], "than": [4, 5, 11], "thei": [0, 7, 11, 13, 14], "them": [4, 13], "thi": [0, 6, 10, 12, 13, 14, 15, 16], "thing": 15, "third_dict": 5, "third_list": 5, "third_tupl": 5, "those": [7, 13, 14], "though": 4, "thousand": [], "three": [0, 7, 11, 12, 13], "through": 10, "throughout": 6, "time": 13, "tmp": [0, 3, 5, 6], "to_excel": 2, "togeth": [0, 4, 11], "too": [], "tool": 14, "top": 15, "topic": 13, "total": 7, "total_bedroom": 2, "total_num_bedroom": 2, "total_num_household": 2, "total_room": 2, "trace": 11, "traceback": [0, 5, 6], "tradit": 0, "transform": [0, 10], "treat": [11, 15], "tri": 5, "trip": 13, "true": [3, 12], "true_valu": [], "truncat": 8, "truthi": [4, 11], "try": 3, "tupl": [0, 4, 13], "twelv": 13, "two": [14, 15], "type": [4, 12], "typeerror": 4, "typic": 4, "uibmrnxce7x6mdmm0dt3j": [], "unambigu": 7, "unchang": [5, 6, 11], "under": 13, "understand": 15, "unexpect": 3, "unforeseen": 4, "union": [], "unit": 4, "unsaf": 5, "up": [0, 4, 7, 8, 11, 13], "updat": 6, "upper": 13, "uppercas": [4, 11], "url": 2, "us": [13, 14, 15], "usecol": [], "user": 13, "usp": [], "usual": [], "util": [], "valid": [], "valu": [], "valueerror": [0, 4, 7, 12], "variat": 14, "varriabl": [], "verbos": [], "verifi": 0, "version": [4, 13], "vfunc": 1, "view": 13, "visibl": 6, "w": 5, "wa": [0, 5, 6, 7, 11], "wai": [4, 10, 13], "want": 16, "warn_bad_lin": [], "we": 6, "well": 16, "wendi": 14, "were": [0, 4], "what": 6, "when": [7, 11, 14, 15], "where": [0, 4, 11], "wherea": 14, "whether": [4, 14], "which": [4, 6, 7, 8, 11, 15], "while": [3, 7], "whitespac": [4, 11], "who": 13, "whole": 7, "within": 13, "without": [4, 11, 13], "word": [3, 4], "work": [5, 6, 7, 16], "world": 4, "would": [4, 5, 6, 7], "wrapper": [], "write": [14, 15], "written": [4, 14, 15], "www": 2, "x": [3, 4, 11], "x_plus_3": 3, "x_times_i": 1, "x_y_z": 0, "xl": [], "xlsx": 2, "xplus3": 3, "xplus_3": 3, "y": [1, 3, 11], "yet": 4, "yield": [3, 7], "you": [6, 7, 14, 15, 16], "your": [4, 10, 14, 15, 16], "yyyi": 7, "z": [1, 10, 11], "zero": [0, 4], "zip": []}, "titles": ["A First Look At Lists", "A Quick Introduction To NumPy", "A Quick Introduction To Pandas", "Basic Grammar", "Control Statements", "A Quick Introduction To Dictionaries", "A Quick Look At Functions", "A Quick Introduction To Manipulating Dates", "A Quick Introduction To Numbers And Booleans", "Introduction-To-Python-For-Financial-Python", "Sets", "A Quick Look At Strings", "A Quick Introduction To Tuples", "Background Material: An Introduction to Python for Financial Python", "Markdown Files", "Notebooks with MyST Markdown", "Content with notebooks"], "titleterms": {"": [1, 2, 4, 6, 7, 11], "0": [2, 3, 6, 8, 11], "1": [1, 2, 6], "10": 8, "11": 8, "114": 2, "125oegz": [], "15": 7, "1ebkxsemh7s0lgh3hujf6vwy59sxbrcik": [], "1xgcimigtwgialybhdhg44kh3i3is6prr": [], "2": [0, 1, 2, 6], "2025": 7, "3": [1, 2, 11], "4": [2, 6, 10, 11], "5": [0, 2, 8, 10], "56": 2, "6": [0, 2, 10, 11], "64": 1, "7": [10, 11], "8": 10, "9": 3, "A": [0, 1, 2, 4, 5, 6, 7, 8, 11, 12], "And": [0, 2, 4, 5, 6, 7, 8, 11, 12], "As": [2, 3, 5], "At": [0, 1, 2, 4, 6, 11], "But": [6, 10], "By": [0, 1, 2, 4, 6], "For": [0, 1, 2, 3, 4, 6, 7, 9], "If": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11], "In": [0, 1, 2, 3, 4, 6, 7, 8, 11], "It": [1, 2, 3, 5, 6, 7], "Its": [0, 7], "No": 6, "Not": [0, 6], "Of": [1, 2, 3, 4, 5, 6, 8, 10, 11], "On": 4, "One": [1, 2, 6, 7, 8], "Or": [1, 2, 4, 5, 11], "That": [], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12], "Then": 0, "There": [5, 6, 8], "These": [1, 4, 7], "To": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12], "With": [0, 2, 5], "_": 3, "_2": [], "abid": 3, "about": [], "accept": 6, "access": [2, 5, 6, 7], "achiev": [1, 4], "ad": [0, 2, 5, 6, 7], "add": [0, 2, 5, 15], "addit": 7, "addition": 7, "address": [6, 8], "advantag": 8, "affect": 6, "after": [2, 3, 6, 7, 12], "alia": [1, 2], "align": 7, "all": [2, 3, 5, 7, 11], "allow": [1, 2, 5, 7, 8], "along": [2, 7, 11], "alphabet": 3, "also": [0, 1, 2], "altern": [2, 5], "alwai": 8, "amd": [], "ampersand": 1, "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15], "analysi": 7, "ani": [1, 4, 6, 8, 11], "annual": 7, "anonym": [2, 6], "anoth": [0, 2, 3, 5, 7, 8, 11], "anyi": [], "anyth": 3, "apostroph": 11, "appear": 6, "append": 0, "appli": [2, 8], "approach": [5, 11], "april": 7, "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12], "argument": [1, 2, 5, 6, 7], "arithmet": 8, "arrai": [1, 2], "array_method": 1, "ascend": 0, "assign": [0, 1, 2, 4, 6, 7, 8, 11], "associ": [5, 8], "attempt": [5, 6], "attent": [1, 8], "attribut": [1, 2, 7], "attribute_list": 7, "attribute_nam": 7, "automat": 8, "avail": [5, 6, 11], "averag": 2, "average_bedroom": 2, "avoid": [2, 5, 12], "awkward": 3, "ax": 1, "axi": [1, 2], "b": 12, "back": 4, "background": 13, "backslash": [7, 11], "bare": 2, "base": [5, 11], "basic": [3, 8, 11], "becaus": [1, 2, 3, 4, 6, 8], "becom": [0, 3], "bedroom": 2, "been": [2, 7], "befor": [1, 2, 3], "begin": [3, 4, 11], "being": [4, 5, 11], "below": [1, 2, 3, 8, 11], "benefit": 1, "better": 5, "between": 3, "binari": 8, "bind": 11, "bit": 3, "blank": 11, "block": [1, 2, 4, 16], "board": 11, "bone": 2, "boolean": [0, 4, 6, 8, 11], "boolena": [], "both": [2, 6, 8, 11], "br": [0, 1, 2, 12], "bracket": [0, 5, 10, 12], "break": 4, "breviti": 3, "brief": 6, "build": 7, "built": [2, 6, 7, 8, 11], "byte": 1, "c": 12, "calcul": [1, 2, 7], "calendar": 7, "california_housing_train": 2, "call": [3, 6], "cam": 1, "can": [0, 1, 2, 4, 5, 6, 7, 8, 11, 12], "cannot": [3, 4, 12], "capit": [2, 4, 7], "case": [2, 3, 4, 11], "caus": 11, "cell": [1, 2, 15], "chang": [2, 4, 12], "chapter": [1, 2, 4], "charact": [0, 3, 4, 7, 11], "check": [2, 8], "chosen": 3, "citat": 14, "clarifi": 6, "clariti": [1, 3, 6], "class": 8, "clearer": 6, "click": 11, "code": [1, 2, 3, 4, 6, 8, 11, 16], "colab": 2, "colon": [4, 6, 7, 11], "color": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12], "column": [1, 2], "com": [], "combin": [0, 10, 11, 12], "combined_tupl": 12, "come": 6, "comfort": 3, "comma": [0, 12], "command": [3, 5, 6, 12], "comment": [3, 6], "common": [1, 2, 3, 6], "commonli": 0, "comparison": 8, "complex": [1, 6, 8], "compon": [7, 8], "comprehens": [0, 2, 5, 10], "comput": 8, "concaten": [11, 12], "concept": [1, 2, 3, 11], "conclud": 4, "condit": 4, "conform": 1, "confus": 8, "consequ": 11, "consid": [], "constructor": [0, 5, 10, 12], "contain": [0, 1, 2, 11], "content": 16, "continu": 4, "contrast": 7, "control": [1, 2, 3, 4, 6], "conveni": [2, 3, 7, 8], "convert": [0, 1, 2, 5, 7, 8, 11], "correspond": 5, "could": 4, "count": [8, 11], "countabl": 11, "counter": 4, "creat": [0, 1, 2, 4, 5, 6, 7, 10, 12, 15], "create_global_vari": 6, "creation": 12, "csv": 2, "curli": [5, 10], "current": 4, "custom": 2, "cut": [8, 11], "d": 7, "dai": 7, "dash": [6, 7], "data": [0, 1, 2, 5, 6, 8, 11, 12], "datafram": 2, "date": [2, 7], "date_differ": 7, "datetim": [2, 7], "datetutil": 7, "dateutil": 7, "decim": 8, "declar": [6, 8], "decript": [], "def": 6, "default": [0, 2, 6, 7, 11], "defin": [4, 6, 7, 11], "definit": [5, 11], "del": 5, "delet": [5, 6], "demonstr": [0, 1, 2, 4, 7, 11], "denomin": 8, "denot": 7, "depend": [1, 2], "descend": 0, "describ": [0, 11], "descript": [3, 11], "desir": [], "determin": [2, 4], "df_bare_bon": 2, "df_csv": 2, "df_dict": 2, "df_excel": [], "df_excel_new": 2, "df_excel_new_index": 2, "diagon": 1, "dict": 5, "dictionair": [], "dictionairi": [], "dictionari": [2, 5, 10], "differ": [0, 1, 10, 11], "digit": 7, "dimens": 1, "dimension": 1, "direct": [1, 2, 14], "directli": [0, 7], "directori": [], "discus": 1, "discuss": 2, "displai": [2, 7], "disregard": 11, "divis": 8, "dlf4namw00llrekelsr9dxsb": [], "do": 3, "docstr": 6, "document": 6, "doe": [1, 2, 4, 6], "doesn": [3, 5], "dot": [2, 7], "doubl": [8, 11], "down": 8, "download": 2, "drive": [], "drive_link": [], "dropbox": 2, "dtype": 1, "due": 10, "duplic": [2, 6, 10], "e": [2, 11], "each": [0, 1, 2, 3, 4, 5, 11], "earlier": 5, "easiest": 0, "easili": 6, "effect": [2, 4], "efficaci": 6, "effici": 1, "either": [6, 7, 11], "element": [0, 1, 2, 4, 5, 10, 11], "eleven": 8, "elif": 4, "els": [1, 4], "empti": [4, 11], "enabl": 2, "end": [0, 2, 11], "enhanc": 7, "enumer": [2, 4, 11], "equal": [1, 8, 11], "equival": [2, 5, 11], "error": [0, 3, 5, 6, 12], "establish": 6, "etc": 11, "even": [0, 12], "everywher": [1, 6], "exampl": [0, 1, 2, 3, 4, 6, 7, 8, 11, 15], "excel": 2, "exceot": [], "except": [1, 2, 4, 5, 12], "execut": [0, 3, 4, 6, 12], "exercis": 4, "exist": [0, 5, 6], "expand": 7, "expect": 6, "explain": 3, "explan": [2, 3, 4], "explicitli": 7, "explor": 7, "express": [6, 12], "extend": 0, "extens": 7, "extract": 11, "f": [7, 11], "factor": 7, "fail": 4, "fals": [2, 4, 6, 8, 11], "few": 8, "fifth": 4, "file": [2, 14], "final": [8, 11], "financ": [4, 7, 11], "financi": [0, 7, 9, 13], "financial_python": 0, "finish": 6, "first": [0, 1, 2, 4, 5, 6, 7, 11], "five": [2, 6], "fix": 2, "flexibl": 0, "float": [6, 8, 11], "floor": 8, "flow": 4, "folder": 2, "follow": [3, 6, 7, 8, 11], "font": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12], "format": [3, 7], "found": [5, 7], "four": [4, 7, 11], "fourth": 4, "fraction": 8, "frequent": 7, "friendli": 3, "from": [0, 1, 2, 4, 5, 6, 7, 8, 11], "function": [1, 2, 4, 5, 6, 7, 8, 11], "function_as_argu": 6, "fundament": 1, "g": 2, "gemini": 2, "gener": [1, 4, 12], "get": 5, "get_index": 2, "give_something_back": 6, "giving_something_back": 6, "global": 6, "goe": 3, "googl": [], "grammar": 3, "greater": [6, 8], "green": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12], "guess": 3, "h": 7, "ha": [1, 2, 3, 6, 7, 8, 11], "hand": 8, "handl": 7, "hashtag": 3, "have": [1, 2, 3, 5, 6, 8, 10, 11], "help": [1, 2, 4], "here": [0, 1, 2, 4, 7, 8, 11], "hexadecim": 8, "hint": 6, "hold": [0, 5, 8, 11], "hour": 7, "household": 2, "how": [0, 7, 11], "howev": [4, 6], "href": [], "http": [], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14], "ident": [1, 11], "identifi": 2, "ignor": [3, 8], "ij": 4, "illustr": [4, 10, 11], "iloc": 2, "imaginari": 4, "immut": [5, 12], "import": [1, 2, 6, 7], "impos": 3, "improv": [2, 6], "includ": [0, 1, 2, 3, 4, 7, 8, 11, 12], "increment": 8, "indent": [3, 4, 6], "independ": 6, "index": [0, 1, 2, 4, 11, 12], "indic": [3, 6, 8], "inequ": 8, "inform": 3, "initi": [0, 2, 6, 11], "inplac": 2, "insid": [6, 11], "instal": [1, 2], "instanc": [1, 2, 6], "instanti": [0, 2, 12], "instati": [], "instead": [4, 8], "int": 8, "integ": [0, 1, 3, 6, 8, 11], "interpret": [2, 3, 8], "interrupt": 4, "introduc": 3, "introduct": [1, 2, 5, 7, 8, 9, 12, 13], "introductin": [], "introducton": [], "inv": 1, "invalid": 3, "invers": 1, "invert": 1, "involv": 0, "irrelev": 6, "item": 5, "iter": [0, 1, 2, 4, 5, 7, 11, 12], "iterrow": 2, "its": [0, 1, 3, 6, 11], "keep": 2, "kei": [2, 5, 7, 10, 11], "keyerror": 5, "keyword": [3, 6], "label": [2, 5], "lambda": [2, 6], "languag": [3, 8], "last": 7, "latitud": 2, "latitudg": 2, "learn": [3, 14], "left": 8, "len": 11, "length": [3, 11], "less": [7, 8], "letter": [4, 7, 11], "librari": [1, 7], "like": [1, 3, 5, 6, 10, 11, 12], "limit": [1, 3, 6], "linalg": 1, "line": [3, 4, 6, 11], "list": [0, 1, 2, 4, 5, 7, 10, 12], "list_list": 0, "littl": [1, 2], "loc": 2, "local": 6, "locat": [0, 2, 4, 11, 12], "long": 4, "longer": 6, "longitud": 2, "longitude_latitud": 2, "look": [0, 1, 2, 4, 6, 11], "loop": [0, 4, 5, 11], "lower": [3, 4], "m": 7, "mai": [0, 1, 2, 3, 5, 6, 10], "main": 1, "make": [2, 3, 6], "manag": 4, "mani": [7, 8, 11, 12], "manipul": [1, 2, 7, 11], "mark": 2, "markdown": [14, 15, 16], "materi": 13, "mathemat": 8, "matmul": 1, "matric": 1, "matrix": 1, "member": [4, 10, 11], "memori": [], "met": 4, "metadata": 15, "method": [0, 1, 2, 4, 5, 6, 7, 10, 11, 12], "microsecond": 7, "might": [3, 8], "millisecond": 7, "mind": [3, 8], "minu": [2, 4], "minut": 7, "miss": 5, "mixed_list": 0, "modifi": [5, 6], "modul": [1, 2, 7], "modulu": 8, "month": 7, "monthrang": 7, "more": [0, 5, 7, 14], "most": [3, 7, 8, 11], "moudul": [], "much": 5, "multi": 1, "multilin": 6, "multipl": [0, 1, 4, 5, 12], "multipli": [1, 4], "multiplied_arrai": 1, "must": [1, 2, 3, 5, 6, 7], "mutabl": 5, "myst": [14, 15, 16], "name": [2, 3, 6], "natur": 3, "ndim": 1, "necessari": [1, 2], "necessarili": 11, "need": [1, 2, 6], "neg": 11, "negat": 2, "nest": [0, 1], "nevertheless": 6, "new": [0, 1, 2, 3, 5, 6], "next": 2, "nice": 2, "non": 5, "nonzero": 8, "notabl": 7, "notat": 7, "note": [], "notebook": [1, 2, 4, 7, 15, 16], "noth": 6, "nothing_return": 6, "notic": 11, "now": 6, "np": 1, "number": [1, 2, 3, 4, 6, 8, 11], "numer": [1, 6, 7, 8, 11], "numpi": [1, 2], "object": [1, 2, 4, 6, 7], "obviou": 3, "occur": 3, "occurr": 2, "octal": 8, "off": [], "offer": [1, 6, 7], "often": [1, 3, 6], "onc": [5, 6], "one": [1, 2, 4, 6, 7, 8, 11], "one_half": 8, "ones": [1, 5], "onli": [0, 2, 3, 6], "oper": [1, 2, 4, 8, 11, 12], "opposit": 8, "option": [0, 6], "order": [0, 1, 6], "organ": 2, "origin": [0, 1], "other": [0, 2, 3, 6, 7, 8, 11], "otherwis": 8, "our": [1, 2, 7], "out": 2, "output": [5, 7, 16], "outsid": 6, "over": [1, 2, 3], "own": 6, "pair": [2, 5, 11], "panda": [1, 2, 6], "paramet": [6, 7], "parenthes": [6, 12], "pars": [3, 8], "parser": 11, "part": [7, 11], "particularli": 5, "pass": [1, 6, 7], "path": 2, "pattern": 6, "payment": 7, "pd": 2, "percent": 7, "perform": [1, 4, 5], "perman": [2, 5], "physic": 5, "plu": [0, 2, 4, 11, 12], "point": [6, 8, 11], "pop": 5, "posit": 6, "possess": 11, "possibl": 8, "preced": [7, 11], "prefer": 1, "prefix": 7, "present": [2, 7], "prevent": [], "previous": 7, "primari": 2, "print": [2, 6, 8, 11], "printabl": 11, "procedur": 1, "proceed": 4, "process": 3, "produc": [5, 11], "product": 1, "program": [3, 4], "proper": 4, "provid": [0, 1, 2, 4, 6, 7, 11], "purpos": [1, 3, 6], "python": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13], "quick": [1, 2, 4, 5, 6, 7, 8, 11, 12], "quickli": 15, "quot": 11, "rais": 5, "rang": 11, "rather": 7, "read_csv": 2, "readabl": 6, "real": 4, "rearrang": 0, "recal": 4, "recommend": 3, "redund": 6, "refer": [2, 7], "regard": 3, "rel": 11, "relativedelta": 7, "relev": 11, "reli": 7, "remain": 4, "remaind": 8, "reminisc": 2, "remov": 5, "repeat": 4, "repetit": 8, "replac": 2, "repres": [1, 4, 7, 8, 11], "represent": [4, 7, 11], "requir": [2, 3, 4, 6, 7, 8], "research": [], "reserv": 3, "respect": [1, 2, 6, 7], "result": [0, 1, 6, 7, 8, 12], "return": [0, 1, 2, 3, 5, 6, 7, 8, 11, 12], "revers": 0, "review": 4, "right": [6, 8], "rightli": 3, "role": 14, "root": 4, "round": [8, 12], "row": [1, 2], "rule": [3, 6], "run": 6, "sai": 3, "same": [2, 3, 4, 5, 6, 8, 12], "sampl": [2, 14], "sample_data": 2, "scalar": 1, "second": [1, 2, 4, 6, 7, 11], "see": [1, 2], "seem": [3, 8], "sens": 2, "sensit": 3, "separ": [0, 4, 7, 11, 12], "seri": 2, "server": [], "set": [8, 10], "set_index": 2, "seven": 8, "sever": [0, 2], "shape": 1, "share": [], "sheet": [], "sheet_nam": [], "short": [3, 8, 11], "shorthand": 2, "should": [3, 6], "show": [2, 3, 6, 11], "shown": 6, "side": 8, "sign": [0, 3, 6, 7, 8, 11, 12], "signatur": 6, "signifi": 7, "similar": [2, 4, 10, 12], "simpl": [1, 2, 4, 6], "simplest": 1, "simplifi": 1, "sinc": 6, "singl": [1, 2, 4, 6, 8, 11], "six": 11, "size": [1, 11], "skip": 4, "slice": [0, 1, 2, 11, 12], "sole": [1, 2], "some": [0, 2, 7], "sort": 0, "space": 3, "specif": [6, 7], "specifi": [0, 6, 7], "split": 4, "spreadsheet": 2, "squar": [0, 1, 4, 6], "square_value_div": 6, "standard": 7, "start": [3, 4, 11], "state": 8, "statement": [1, 2, 3, 4, 6, 8, 11], "statist": 1, "statmeent": [], "step": 11, "still": [], "stop": 12, "store": [5, 8], "str": [6, 7, 11], "straightforward": 8, "string": [0, 4, 5, 6, 7, 8, 11], "strptime": 7, "structur": 7, "style": 5, "subtract": 7, "sum": 1, "support": 12, "suppos": 8, "symbol": 1, "syntax": 3, "t": [2, 3, 5, 12], "tabl": 2, "take": [4, 5, 7], "ten": 2, "termin": [0, 4], "test": [4, 8], "text": 0, "th": 7, "than": [6, 7, 8], "thei": [6, 12], "them": 11, "therefor": [], "thi": [1, 2, 4, 5, 7, 8, 11], "thing": 8, "third": [2, 4, 5], "those": [2, 5, 6], "though": 12, "three": [1, 2, 3], "through": [0, 1, 2, 4, 5, 7, 11, 12], "time": [3, 7], "time_stamp": 7, "timedelta": 7, "timestamp": 2, "to_excel": [], "to_numpi": 2, "tool": 0, "total": 2, "track": 2, "trade": [], "tradeoff": 3, "transfer": 4, "transform": [2, 11], "transpar": 3, "transpos": [1, 2], "transpose_arrai": 1, "trasnpos": [], "treat": 3, "true": [0, 2, 4, 8, 11], "trust": 3, "try": [1, 2, 4, 5, 12], "tupl": [2, 5, 12], "two": [1, 2, 4, 5, 6, 7, 8, 11], "type": [0, 1, 2, 6, 8, 11], "typic": 6, "underscor": 3, "unfamiliar": 8, "union": [6, 10], "uniqu": [2, 5, 6, 10], "unlik": [2, 6, 8, 10, 11, 12], "unord": 10, "unpack": 5, "up": 5, "updat": 5, "upon": 7, "upper": [3, 4], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12], "usag": 6, "user": [3, 6], "usp": [], "util": [4, 11], "valid": [3, 5], "valu": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12], "variabl": [0, 2, 3, 4, 5, 6, 7, 8, 11], "variou": 4, "vector": 1, "veri": [2, 3], "versatil": 2, "version": 11, "view": 5, "volatil": 7, "volum": 1, "wa": [2, 4], "wai": [0, 5, 7, 8, 12], "want": [2, 8], "we": 4, "week": 7, "weekdai": 7, "well": 6, "what": [3, 14], "when": [4, 5, 6, 8], "where": [5, 6, 7], "which": 5, "while": [4, 11], "whole": 3, "wise": 2, "within": [0, 2, 4, 6, 7, 11], "without": [3, 6, 7, 8, 10], "word": 5, "work": 0, "worth": [], "written": 6, "x": [0, 1, 2, 5, 6, 8, 10], "xlsx": [], "y": [0, 2, 5, 6, 7, 8, 10], "yaml": 15, "year": 7, "you": [0, 1, 2, 3, 5, 8], "your": [1, 2], "z": [0, 2, 5, 6], "zero": [1, 6, 7, 8, 11], "zip": [5, 7]}})